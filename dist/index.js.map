{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/UseStateLink.tsx"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import React from 'react';\n\n///\n/// EXPOTED SYMBOLS (LIBRARY INTERFACE)\n///\n\n/**\n * 'JSON path' from root of a state object to a nested property.\n * Return type of [StateMethod.path](#path).\n *\n * For example, an object `{ a: [{ b: 1 }, { 1000: 'value' }, '3rd'] }`,\n * has got the following paths pointing to existing properties:\n *\n * - `[]`\n * - `['a']`\n * - `['a', 0]`\n * - `['a', 0, 'b']`\n * - `['a', 1]`\n * - `['a', 1, 1000]`\n * - `['a', 2]`\n */\nexport type Path = ReadonlyArray<string | number>;\n\n/**\n * Type of an argument of [StateMethods.set](#set).\n * \n * @typeparam S Type of a value of a state\n */\nexport type SetStateAction<S> = (S | Promise<S>) | ((prevState: S) => (S | Promise<S>));\n\n/**\n * Type of an argument of [StateMethods.merge](#merge).\n * \n * @typeparam S Type of a value of a state\n */\nexport type SetPartialStateAction<S> =\n    S extends ReadonlyArray<(infer U)> ?\n        ReadonlyArray<U> | Record<number, U> | ((prevValue: S) => (ReadonlyArray<U> | Record<number, U>)) :\n    S extends object | string ? Partial<S> | ((prevValue: S) => Partial<S>) :\n    React.SetStateAction<S>;\n\n/**\n * Type of an argument of [createState](#createstate) and [useState](#usestate).\n * \n * @typeparam S Type of a value of a state\n */\nexport type SetInitialStateAction<S> = S | Promise<S> | (() => S | Promise<S>)\n\n/**\n * Special symbol which is used as a property to switch\n * between [StateMethods](#interfacesstatemethodsmd) and the corresponding [State](#state).\n */\nexport const self = Symbol('self')\n\n/**\n * Special symbol which might be returned by onPromised callback of [StateMethods.map](#map) function.\n */\nexport const postpone = Symbol('postpone')\n\n/**\n * Special symbol which might be used to delete properties\n * from an object calling [StateMethods.set](#set) or [StateMethods.merge](#merge).\n */\nexport const none = Symbol('none') as StateValueAtPath;\n\n/**\n * Return type of [StateMethods.keys](#keys).\n * \n * @typeparam S Type of a value of a state\n */\nexport type InferredStateKeysType<S> =\n    S extends ReadonlyArray<infer _> ? ReadonlyArray<number> :\n    S extends null ? undefined :\n    S extends object ? ReadonlyArray<keyof S> :\n    undefined;\n\n/**\n * Return type of [StateMethods.map()](#map).\n * \n * @typeparam S Type of a value of a state\n */\nexport type InferredStateOrnullType<S> =\n    S extends undefined ? undefined :\n    S extends null ? null : State<S>;\n\n/**\n * For plugin developers only.\n * An instance to manipulate the state in more controlled way.\n * \n * @typeparam S Type of a value of a state\n */\nexport interface PluginStateControl<S> {\n    /**\n     * Get state value, but do not leave the traces of reading it.\n     */\n    getUntracked(): S;\n    /**\n     * Set new state value, but do not trigger rerender.\n     * \n     * @param newValue new value to set to a state.\n     */\n    setUntracked(newValue: SetStateAction<S>): Path[];\n    /**\n     * Merge new state value, but do not trigger rerender.\n     * \n     * @param mergeValue new partial value to merge with the current state value and set.\n     */\n    mergeUntracked(mergeValue: SetPartialStateAction<S>): Path[];\n    /**\n     * Trigger rerender for hooked states, where values at the specified paths are used.\n     * \n     * @param paths paths of the state variables to search for being used by components and rerender\n     */\n    rerender(paths: Path[]): void;\n}\n\n/**\n * An interface to manage a state in Hookstate.\n * \n * @typeparam S Type of a value of a state\n */\nexport interface StateMethods<S> {\n    /**\n     * Returns the state instance managed by these methods.\n     * \n     * \n     */\n    [self]: State<S>;\n\n    /**\n     * 'Javascript' object 'path' to an element relative to the root object\n     * in the state. For example:\n     *\n     * ```tsx\n     * const state = useState([{ name: 'First Task' }])\n     * state[self].path IS []\n     * state[0][self].path IS [0]\n     * state.[0].name[self].path IS [0, 'name']\n     * ```\n     */\n    readonly path: Path;\n\n    /**\n     * Return the keys of nested states.\n     * For a given state of [State](#state) type,\n     * `state[self].keys` will be structurally equal to Object.keys(state),\n     * with two minor difference:\n     * 1. if `state[self].value` is an array, the returned result will be\n     * an array of numbers, not strings like with `Object.keys`.\n     * 2. if `state[self].value` is not an object, the returned result will be undefined.\n     */\n    readonly keys: InferredStateKeysType<S>;\n\n    /**\n     * Unwraps and returns the underlying state value referred by\n     * [path](#path) of this state instance.\n     *\n     * It returns the same result as [StateMethods.get](#get) method.\n     *\n     * This property is more useful than [get](#get) method for the cases,\n     * when a value may hold null or undefined values.\n     * Typescript compiler does not handle elimination of undefined with get(),\n     * like in the following examples, but value does:\n     *\n     * ```tsx\n     * const state = useState<number | undefined>(0)\n     * const myvalue: number = state[self].value\n     *      ? state[self].value + 1\n     *      : 0; // <-- compiles\n     * const myvalue: number = state[self].get()\n     *      ? state[self].get() + 1\n     *      : 0; // <-- does not compile\n     * ```\n     */\n    readonly value: S;\n\n    /**\n     * Unwraps and returns the underlying state value referred by\n     * [path](#path) of this state instance.\n     *\n     * It returns the same result as [StateMethods.value](#value) method.\n     */\n    get(): S;\n    \n    /**\n     * Sets new value for a state.\n     * If `this.path === []`,\n     * it is similar to the `setState` variable returned by `React.useState` hook.\n     * If `this.path !== []`, it sets only the segment of the state value, pointed out by the path.\n     * Unlike [merge](#merge) method, this method will not accept partial updates.\n     * Partial updates can be also done by walking the nested states and setting those.\n     *\n     * @param newValue new value to set to a state.\n     * It can be a value, a promise resolving to a value\n     * (only if [this.path](#path) is `[]`),\n     * or a function returning one of these.\n     * The function receives the current state value as an argument.\n     */\n    set(newValue: SetStateAction<S>): void;\n    \n    /**\n     * Similarly to [set](#set) method updates state value.\n     *\n     * - If current state value is an object, it does partial update for the object.\n     * - If state value is an array and the argument is an array too,\n     * it concatenates the current value with the value of the argument and sets it to the state.\n     * - If state value is an array and the `merge` argument is an object,\n     * it does partial update for the current array value.\n     * - If current state value is a string, it concatenates the current state\n     * value with the argument converted to string and sets the result to the state.\n     */\n    merge(newValue: SetPartialStateAction<S>): void;\n    \n    /**\n     * Maps this state to the result via the provided action.\n     * \n     * @param action mapper function\n     * \n     * @param onPromised this will be invoked instead of the action function,\n     * if a state value is unresolved promise.\n     * \n     * @param onError this will be invoked instead of the action function,\n     * if a state value is a promise resolved to an error.\n     * \n     * @param context if specified, the callbacks will be invoked in a batch.\n     * Updating state within a batch does not trigger immediate rerendering.\n     * Instead, all required rerendering is done once once the batch is finished.\n     */\n    map<R, RL, RE, C>(\n        action: (s: State<S>) => R,\n        onPromised: (s: State<S>) => RL,\n        onError: (e: StateErrorAtRoot, s: State<S>) => RE,\n        context?: Exclude<C, Function>\n    ): R | RL | RE;\n\n    /**\n     * Maps this state to the result via the provided action.\n     * \n     * @param action mapper function\n     * \n     * @param onPromised this will be invoked instead of the action function,\n     * if a state value is unresolved promise.\n     * \n     * @param context if specified, the callbacks will be invoked in a batch.\n     * Updating state within a batch does not trigger immediate rerendering.\n     * Instead, all required rerendering is done once once the batch is finished.\n     */\n    map<R, RL, C>(\n        action: (s: State<S>) => R,\n        onPromised: (s: State<S>) => RL,\n        context?: Exclude<C, Function>\n    ): R | RL;\n\n    /**\n     * Maps this state to the result via the provided action.\n     * \n     * @param action mapper function\n     * \n     * @param context if specified, the callbacks will be invoked in a batch.\n     * Updating state within a batch does not trigger immediate rerendering.\n     * Instead, all required rerendering is done once once the batch is finished.\n     */\n    map<R, C>(\n        action: (s: State<S>) => R,\n        context?: Exclude<C, Function>\n    ): R;\n    \n    /**\n     * Unfolds this state to an array representing promise state.\n     * The first element of the array result indicates if promise is loading\n     * (true - loading: promise is not resolved, false - not loading: promise is resolved).\n     * The second element with be either undefined or a value of an error,\n     * which the resolved promise rejected. The third element will be\n     * either undefined or a value of a state, if promise is resolved.\n     */\n    map(): [boolean, StateErrorAtRoot | undefined, S | undefined];\n\n    /**\n     * If state value is null or undefined, returns state value.\n     * Otherwise, it returns this state instance but\n     * with null and undefined removed from the type parameter.\n     */\n    ornull: InferredStateOrnullType<S>;\n\n    /**\n     * Adds plugin to the state.\n     */\n    attach(plugin: () => Plugin): State<S>\n    \n    /**\n     * For plugin developers only.\n     * It is a method to get the instance of the previously attached plugin.\n     * If a plugin has not been attached to a state,\n     * it returns an Error as the first element.\n     * A plugin may trhow an error to indicate that plugin has not been attached.\n     */\n    attach(pluginId: symbol): [PluginCallbacks | Error, PluginStateControl<S>]\n}\n\n/**\n * Mixin for the [StateMethods](#interfacesstatemethodsmd) for a [State](#state),\n * which can be destroyed by a client.\n */\nexport interface StateMethodsDestroy {\n    /**\n     * Destroys an instance of a state, so\n     * it can clear the allocated native resources (if any)\n     * and can not be used anymore after it has been destroyed.\n     */\n    destroy(): void;\n}\n\n/**\n * User's state mixin with the special `self`-symbol property,\n * which allows to get [StateMethods](#interfacesstatemethodsmd) for a [State](#state).\n * \n * @typeparam S Type of a value of a state\n */\nexport interface StateMixin<S> {\n    /**\n     * Returns [StateMethods](#interfacesstatemethodsmd) for a [State](#state) \n     */\n    [self]: StateMethods<S>;\n}\n\n/**\n * User's state mixin with the special `self`-symbol property,\n * which allows to get [StateMethodsDestroy](#interfacesstatemethodsdestroymd) for a [State](#state).\n */\nexport interface StateMixinDestroy {\n    /**\n     * Returns [StateMethodsDestroy](#interfacesstatemethodsdestroymd) for a [State](#state) \n     */\n    [self]: StateMethodsDestroy;\n}\n\n/**\n * Type of a result of [createState](#createstate) and [useState](#usestate) functions\n * \n * @typeparam S Type of a value of a state\n */\nexport type State<S> = StateMixin<S> & (\n    S extends ReadonlyArray<(infer U)> ? ReadonlyArray<State<U>> :\n    // workaround for typescript unfolding State<boolean> to \n    // State<true> | State<false>, which results in broken type information\n    // for direct state methods.\n    // Note: this is covered by tests, so if you remove next 2 lines\n    // you will see where it breaks the compilation\n    S extends (true | false) ?\n        Omit<StateMethods<boolean>, keyof StateMixin<S>> :\n    S extends (undefined | null | number | boolean | string | bigint) ?\n        Omit<StateMethods<S>, keyof StateMixin<S>> :\n    S extends object ? { readonly [K in keyof Required<S>]: State<S[K]>; } :\n    {}\n);\n\n/**\n * For plugin developers only.\n * Type alias to highlight the places where we are dealing with root state value.\n *\n * @hidden\n * @ignore\n */\nexport type StateValueAtRoot = any; //tslint:disable-line: no-any\n/**\n * For plugin developers only.\n * Type alias to highlight the places where we are dealing with nested state value.\n *\n * @hidden\n * @ignore\n */\nexport type StateValueAtPath = any; //tslint:disable-line: no-any\n/**\n * For plugin developers only.\n * Type alias to highlight the places where we are dealing with state error.\n *\n * @hidden\n * @ignore\n */\nexport type StateErrorAtRoot = any; //tslint:disable-line: no-any\n/**\n * For plugin developers only.\n * Type alias to highlight the places where we are dealing with context value.\n *\n * @hidden\n * @ignore\n */\nexport type AnyContext = any; //tslint:disable-line: no-any\n\n/**\n * For plugin developers only.\n * PluginCallbacks.onSet argument type.\n */\nexport interface PluginCallbacksOnSetArgument {\n    readonly path: Path,\n    readonly state?: StateValueAtRoot,\n    readonly previous?: StateValueAtPath,\n    readonly value?: StateValueAtPath,\n    readonly merged?: StateValueAtPath,\n}\n\n/**\n * For plugin developers only.\n * PluginCallbacks.onDestroy argument type.\n */\nexport interface PluginCallbacksOnDestroyArgument {\n    readonly state?: StateValueAtRoot,\n}\n\n/**\n * For plugin developers only.\n * PluginCallbacks.onBatchStart/Finish argument type.\n */\nexport interface PluginCallbacksOnBatchArgument {\n    readonly path: Path,\n    readonly state?: StateValueAtRoot,\n    readonly context?: AnyContext,\n}\n\n/**\n * For plugin developers only.\n * Set of callbacks, a plugin may subscribe to.\n */\nexport interface PluginCallbacks {\n    readonly onSet?: (arg: PluginCallbacksOnSetArgument) => void,\n    readonly onDestroy?: (arg: PluginCallbacksOnDestroyArgument) => void,\n    readonly onBatchStart?: (arg: PluginCallbacksOnBatchArgument) => void,\n    readonly onBatchFinish?: (arg: PluginCallbacksOnBatchArgument) => void,\n};\n\n/**\n * For plugin developers only.\n * Hookstate plugin specification and factory method.\n */\nexport interface Plugin {\n    /**\n     * Unique identifier of a plugin.\n     */\n    readonly id: symbol;\n    /**\n     * Initializer for a plugin when it is attached for the first time.\n     */\n    readonly init?: (state: State<StateValueAtRoot>) => PluginCallbacks;\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function createStateLink<S>(\n    initial: SetInitialStateAction<S>\n): StateLink<S> & StateMethodsDestroy;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function createStateLink<S, R>(\n    initial: SetInitialStateAction<S>,\n    transform: (state: StateLink<S>, prev: R | undefined) => R\n): WrappedStateLink<R> & StateMethodsDestroy;\nexport function createStateLink<S, R>(\n    initial: SetInitialStateAction<S>,\n    transform?: ((state: StateLink<S>, prev: R | undefined) => R)\n): (StateLink<S> & StateMethodsDestroy) |\n    (WrappedStateLink<R> & StateMethodsDestroy) {\n    const stateLink = createStore(initial).accessUnmounted() as StateLinkImpl<S>\n    if (createStateLink[DevToolsID]) {\n        stateLink.with(createStateLink[DevToolsID])\n    }\n    if (transform) {\n        return stateLink.wrap(transform)\n    }\n    return stateLink\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function useStateLink<S>(\n    source: StateLink<S>\n): StateLink<S>;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function useStateLink<S, R>(\n    source: StateLink<S>,\n    transform: (state: StateLink<S>, prev: R | undefined) => R\n): R;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function useStateLink<R>(\n    source: WrappedStateLink<R>\n): R;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function useStateLink<S>(\n    source: SetInitialStateAction<S>\n): StateLink<S>;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function useStateLink<S, R>(\n    source: SetInitialStateAction<S>,\n    transform: (state: StateLink<S>, prev: R | undefined) => R\n): R;\nexport function useStateLink<S, R>(\n    source: SetInitialStateAction<S> | StateLink<S> | WrappedStateLink<R>,\n    transform?: (state: StateLink<S>, prev: R | undefined) => R\n): StateLink<S> | R {\n    const [parentLink, tf] =\n        source instanceof StateLinkImpl ?\n            [source as StateLinkImpl<S>, transform] :\n            source instanceof WrappedStateLinkImpl ?\n                [source.state as StateLinkImpl<S>, source.transform] :\n                [undefined, transform];\n    if (parentLink) {\n        if (parentLink.onUpdateUsed === NoActionOnUpdate) {\n            // Global state mount\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const [value, setValue] = React.useState({ state: parentLink.state });\n            const link = useSubscribedStateLink<S>(\n                value.state,\n                parentLink.path,\n                () => setValue({ state: value.state }),\n                value.state,\n                undefined);\n            return tf ? injectTransform(link, tf) : link;\n        } else {\n            // Scoped state mount\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const [, setValue] = React.useState({});\n            const link = useSubscribedStateLink<S>(\n                parentLink.state,\n                parentLink.path,\n                () => setValue({}),\n                parentLink,\n                parentLink.isDowngraded);\n            return tf ? injectTransform(link, tf) : link;\n        }\n    } else {\n        // Local state mount\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [value, setValue] = React.useState(() => ({ state: createStore(source) }));\n        const link = useSubscribedStateLink<S>(\n            value.state,\n            RootPath,\n            () => setValue({ state: value.state }),\n            value.state,\n            undefined);\n        React.useEffect(() => () => value.state.destroy(), []);\n        if (useStateLink[DevToolsID]) {\n            link.with(useStateLink[DevToolsID])\n        }\n        return tf ? injectTransform(link, tf) : link;\n    }\n}\n\n/**\n * Creates new state and returns it.\n *\n * You can create as many global states as you need.\n *\n * When you the state is not needed anymore,\n * it should be destroyed by calling\n * `destroy()` method of the returned instance.\n * This is necessary for some plugins,\n * which allocate native resources,\n * like subscription to databases, broadcast channels, etc.\n * In most cases, a global state is used during\n * whole life time of an application and would not require\n * destruction. However, if you have got, for example,\n * a catalog of dynamically created and destroyed global states,\n * the states should be destroyed as advised above.\n *\n * @param initial Initial value of the state.\n * It can be a value OR a promise,\n * which asynchronously resolves to a value,\n * OR a function returning a value or a promise.\n *\n * @typeparam S Type of a value of the state\n *\n * @returns [State](#state) instance,\n * which can be used directly to get and set state value\n * outside of React components.\n * When you need to use the state in a functional `React` component,\n * pass the created state to [useState](#usestate) function and\n * use the returned result in the component's logic.\n */\nexport function createState<S>(\n    initial: SetInitialStateAction<S>\n): State<S> & StateMixinDestroy {\n    const stateLink = createStateLink(initial);\n    if (createState[DevToolsID]) {\n        stateLink.attach(createState[DevToolsID])\n    }\n    return stateLink[self] as State<S> & StateMixinDestroy;\n}\n\n/**\n * Enables a functional React component to use a state,\n * either created by [createState](#createstate) (*global* state) or\n * derived from another call to [useState](#usestate) (*scoped* state).\n *\n * The `useState` forces a component to rerender everytime, when:\n * - a segment/part of the state data is updated *AND only if*\n * - this segement was **used** by the component during or after the latest rendering.\n *\n * For example, if the state value is `{ a: 1, b: 2 }` and\n * a component uses only `a` property of the state, it will rerender\n * only when the whole state object is updated or when `a` property is updated.\n * Setting the state value/property to the same value is also considered as an update.\n *\n * A component can use one or many states,\n * i.e. you may call `useState` multiple times for multiple states.\n *\n * The same state can be used by multiple different components.\n *\n * @param source a reference to the state to hook into\n *\n * The `useState` is a hook and should follow React's rules of hooks.\n *\n * @returns an instance of [State](#state),\n * which **must be** used within the component (during rendering\n * or in effects) or it's children.\n */\nexport function useState<S>(\n    source: State<S>\n): State<S>;\n/**\n * This function enables a functional React component to use a state,\n * created per component by [useState](#usestate) (*local* state).\n * In this case `useState` behaves similarly to `React.useState`,\n * but the returned instance of [State](#state)\n * has got more features.\n *\n * When a state is used by only one component, and maybe it's children,\n * it is recommended to use *local* state instead of *global*,\n * which is created by [createState](#createstate).\n *\n * *Local* (per component) state is created when a component is mounted\n * and automatically destroyed when a component is unmounted.\n *\n * The same as with the usage of a *global* state,\n * `useState` forces a component to rerender when:\n * - a segment/part of the state data is updated *AND only if*\n * - this segement was **used** by the component during or after the latest rendering.\n *\n * You can use as many local states within the same component as you need.\n *\n * @param source An initial value state.\n *\n * @returns an instance of [State](#state),\n * which **must be** used within the component (during rendering\n * or in effects) or it's children.\n */\nexport function useState<S>(\n    source: SetInitialStateAction<S>\n): State<S>;\nexport function useState<S>(\n    source: SetInitialStateAction<S> | State<S>\n): State<S> {\n    let sourceIsInitialValue = true\n    if (typeof source === 'object' && source !== null) {\n        const sl = source[StateMarkerID]\n        if (sl) {\n            // it is already state object\n            source = sl; // get underlying StateLink\n            sourceIsInitialValue = false\n        }\n    }\n    const statelink = useStateLink(source as SetInitialStateAction<S>);\n    if (sourceIsInitialValue && useState[DevToolsID]) {\n        statelink.attach(useState[DevToolsID])\n    }\n    return statelink[self];\n}\n\n/**\n * Allows to use a state without defining a functional react component.\n * It can be also used in class-based React components. It is also\n * particularly usefull for creating *scoped* states.\n *\n * @typeparam S Type of a value of a state\n */\nexport function StateFragment<S>(\n    props: {\n        state: State<S>,\n        children: (state: State<S>) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateFragment<S>(\n    props: {\n        state: StateLink<S>,\n        children: (state: StateLink<S>) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated use StateFragment(state={state.wrap(transform)}) instead\n */\nexport function StateFragment<S, E extends {}, R>(\n    props: {\n        state: StateLink<S>,\n        transform: (state: StateLink<S>, prev: R | undefined) => R,\n        children: (state: R) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateFragment<R>(\n    props: {\n        state: WrappedStateLink<R>,\n        children: (state: R) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateFragment<S>(\n    props: {\n        state: SetInitialStateAction<S>,\n        children: (state: StateLink<S>) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * Allows to use a state without defining a functional react component.\n * See more at [StateFragment](#statefragment)\n * \n * @typeparam S Type of a value of a state\n * // TODO uncomment once moved to version 2\n */\n// export function StateFragment<S>(\n//     props: {\n//         state: SetInitialStateAction<S>,\n//         children: (state: State<S>) => React.ReactElement,\n//     }\n// ): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateFragment<S, R>(\n    props: {\n        state: SetInitialStateAction<S>,\n        transform: (state: StateLink<S>, prev: R | undefined) => R,\n        children: (state: R) => React.ReactElement,\n    }\n): React.ReactElement;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateFragment<S, E extends {}, R>(\n    props: {\n        state: SetInitialStateAction<S> | State<S> | StateLink<S> | WrappedStateLink<R>,\n        transform?: (state: StateLink<S>, prev: R | undefined) => R,\n        children: (state: State<S> | StateLink<S> | R) => React.ReactElement,\n    }\n): React.ReactElement {\n    // tslint:disable-next-line: no-any\n    type AnyArgument = any; // typesafety is guaranteed by overloaded functions above\n    if (props.state[StateMarkerID]) {\n        const scoped = useState<S>(props.state as AnyArgument);\n        return props.children(scoped as AnyArgument);\n    } else {\n        const scoped = useStateLink<S, {}>(props.state as AnyArgument, props.transform as AnyArgument);\n        return props.children(scoped as AnyArgument);\n    }\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport function StateMemo<S, R>(\n    transform: (state: StateLink<S>, prev: R | undefined) => R,\n    equals?: (next: R, prev: R) => boolean) {\n    return (link: StateLink<S>, prev: R | undefined) => {\n        link[StateMemoID] = equals || ((n: R, p: R) => (n === p))\n        return transform(link, prev);\n    }\n}\n\n/**\n * A plugin which allows to opt-out from usage of Javascript proxies for\n * state usage tracking. It is useful for performance tuning. For example:\n *\n * ```tsx\n * const globalState = createState(someLargeObject as object)\n * const MyComponent = () => {\n *     const state = useState(globalState)\n *         .with(Downgraded); // the whole state will be used\n *                            // by this component, so no point\n *                            // to track usage of individual properties\n *     return <>{JSON.stringify(state[self].value)}</>\n * }\n * ```\n */\nexport function Downgraded(): Plugin { // tslint:disable-line: function-name\n    return {\n        id: DowngradedID\n    }\n}\n\n/**\n * For plugin developers only.\n * Reserved plugin ID for developers tools extension.\n *\n * @hidden\n * @ignore\n */\nexport const DevToolsID = Symbol('DevTools');\n\n/**\n * Return type of [DevTools](#devtools).\n */\nexport interface DevToolsExtensions {\n    label(name: string): void;\n    // tslint:disable-next-line: no-any\n    log(str: string, data?: any): void;\n}\n\n/**\n * Returns access to the development tools for a given state.\n * Development tools are delivered as optional plugins.\n * You can activate development tools from `@hookstate/devtools`package,\n * for example. If no development tools are activated,\n * it returns an instance of dummy tools, which do nothing, when called.\n * \n * @param state A state to relate to the extension.\n * \n * @returns Interface to interact with the development tools for a given state.\n * \n * @typeparam S Type of a value of a state\n */\nexport function DevTools<S>(state: StateLink<S> | State<S>): DevToolsExtensions {\n    if (state[StateMarkerID]) {\n        const plugin = (state as State<S>)[self].attach(DevToolsID);\n        if (plugin[0] instanceof Error) {\n            return EmptyDevToolsExtensions;\n        }\n        return plugin[0] as DevToolsExtensions;\n    } else {\n        const plugin = (state as StateLink<S>).with(DevToolsID, () => undefined);\n        if (plugin) {\n            return plugin[1] as DevToolsExtensions;\n        }\n        return EmptyDevToolsExtensions;\n    }\n}\n\n///\n/// INTERNAL SYMBOLS (LIBRARY IMPLEMENTATION)\n///\n\nconst EmptyDevToolsExtensions: DevToolsExtensions = {\n    label() { /* */ },\n    log() { /* */ }\n}\n\nenum ErrorId {\n    InitStateToValueFromState = 101,\n    SetStateToValueFromState = 102,\n    GetStateWhenPromised = 103,\n    SetStateWhenPromised = 104,\n    SetStateNestedToPromised = 105,\n    SetStateWhenDestroyed = 106,\n    GetStatePropertyWhenPrimitive = 107,\n    ToJson_Value = 108,\n    ToJson_State = 109,\n    GetUnknownPlugin = 120,\n\n    SetProperty_State = 201,\n    SetProperty_Value = 202,\n    SetPrototypeOf_State = 203,\n    SetPrototypeOf_Value = 204,\n    PreventExtensions_State = 205,\n    PreventExtensions_Value = 206,\n    DefineProperty_State = 207,\n    DefineProperty_Value = 208,\n    DeleteProperty_State = 209,\n    DeleteProperty_Value = 210,\n    Construct_State = 211,\n    Construct_Value = 212,\n    Apply_State = 213,\n    Apply_Value = 214,\n}\n\nclass StateLinkInvalidUsageError extends Error {\n    constructor(path: Path, id: ErrorId, details?: string) {\n        super(`Error: HOOKSTATE-${id} [path: /${path.join('/')}${details ? `, details: ${details}` : ''}]. ` +\n            `See https://hookstate.js.org/docs/exceptions#hookstate-${id}`)\n    }\n}\n\ninterface Subscriber {\n    onSet(paths: Path[], actions: (() => void)[]): void;\n}\n\ninterface Subscribable {\n    subscribe(l: Subscriber): void;\n    unsubscribe(l: Subscriber): void;\n}\n\nconst DowngradedID = Symbol('Downgraded');\nconst StateMemoID = Symbol('StateMemo');\nconst ProxyMarkerID = Symbol('ProxyMarker');\n/**\n * @hidden\n * @ignore\n * @internal\n * remove export when plugins are migrated to version 2\n */\nexport const StateMarkerID = Symbol('State');\n\nconst RootPath: Path = [];\nconst DestroyedEdition = -1\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nclass Store implements Subscribable {\n    private _edition: number = 0;\n\n    private _subscribers: Set<Subscriber> = new Set();\n    private _setSubscribers: Set<Required<PluginCallbacks>['onSet']> = new Set();\n    private _destroySubscribers: Set<Required<PluginCallbacks>['onDestroy']> = new Set();\n    private _batchStartSubscribers: Set<Required<PluginCallbacks>['onBatchStart']> = new Set();\n    private _batchFinishSubscribers: Set<Required<PluginCallbacks>['onBatchFinish']> = new Set();\n\n    private _plugins: Map<symbol, PluginCallbacks> = new Map();\n\n    private _promised?: Promised;\n\n    private _batches = 0;\n    private _batchesPendingPaths?: Path[];\n    private _batchesPendingActions?: (() => void)[];\n\n    constructor(private _value: StateValueAtRoot) {\n        if (typeof _value === 'object' &&\n            Promise.resolve(_value) === _value) {\n            this._promised = this.createPromised(_value)\n            this._value = None\n        } else if (_value === None) {\n            this._promised = this.createPromised(undefined)\n        }\n    }\n\n    createPromised(newValue: StateValueAtPath | undefined) {\n        const promised = new Promised(\n            newValue ? Promise.resolve(newValue) : undefined,\n            (r: StateValueAtPath) => {\n                if (this.promised === promised && this.edition !== DestroyedEdition) {\n                    this._promised = undefined\n                    this.set(RootPath, r, undefined)\n                    this.update([RootPath])\n                }\n            },\n            () => {\n                if (this.promised === promised && this.edition !== DestroyedEdition) {\n                    this._edition += 1\n                    this.update([RootPath])\n                }\n            },\n            () => {\n                if (this._batchesPendingActions &&\n                    this._value !== None &&\n                    this.edition !== DestroyedEdition) {\n                    const actions = this._batchesPendingActions\n                    this._batchesPendingActions = undefined\n                    actions.forEach(a => a())\n                }\n            }\n        );\n        return promised;\n    }\n\n    get edition() {\n        return this._edition;\n    }\n\n    get promised() {\n        return this._promised;\n    }\n\n    get(path: Path) {\n        let result = this._value;\n        if (result === None) {\n            return result;\n        }\n        path.forEach(p => {\n            result = result[p];\n        });\n        return result;\n    }\n\n    set(path: Path, value: StateValueAtPath, mergeValue: Partial<StateValueAtPath> | undefined): Path {\n        if (this._edition < 0) {\n            throw new StateLinkInvalidUsageError(path, ErrorId.SetStateWhenDestroyed)\n        }\n\n        if (path.length === 0) {\n            // Root value UPDATE case,\n\n            const onSetArg: Writeable<PluginCallbacksOnSetArgument> = {\n                path: path,\n                state: value,\n                value: value,\n                previous: this._value,\n                merged: mergeValue\n            }\n            if (value === None) {\n                this._promised = this.createPromised(undefined)\n                delete onSetArg.value\n                delete onSetArg.state\n            } else if (typeof value === 'object' && Promise.resolve(value) === value) {\n                this._promised = this.createPromised(value)\n                value = None\n                delete onSetArg.value\n                delete onSetArg.state\n            } else if (this._promised && !this._promised.resolver) {\n                throw new StateLinkInvalidUsageError(path, ErrorId.SetStateWhenPromised)\n            }\n\n            let prevValue = this._value;\n            if (prevValue === None) {\n                delete onSetArg.previous\n            }\n            this._value = value;\n            this.afterSet(onSetArg)\n\n            if (prevValue === None && this._value !== None &&\n                this.promised && this.promised.resolver) {\n                this.promised.resolver()\n            }\n\n            return path;\n        }\n\n        if (typeof value === 'object' && Promise.resolve(value) === value) {\n            throw new StateLinkInvalidUsageError(path, ErrorId.SetStateNestedToPromised)\n        }\n\n        let target = this._value;\n        for (let i = 0; i < path.length - 1; i += 1) {\n            target = target[path[i]];\n        }\n\n        const p = path[path.length - 1]\n        if (p in target) {\n            if (value !== None) {\n                // Property UPDATE case\n                let prevValue = target[p]\n                target[p] = value;\n                this.afterSet({\n                    path: path,\n                    state: this._value,\n                    value: value,\n                    previous: prevValue,\n                    merged: mergeValue\n                })\n\n                return path;\n            } else {\n                // Property DELETE case\n                let prevValue = target[p]\n                if (Array.isArray(target) && typeof p === 'number') {\n                    target.splice(p, 1)\n                } else {\n                    delete target[p]\n                }\n                this.afterSet({\n                    path: path,\n                    state: this._value,\n                    previous: prevValue,\n                    merged: mergeValue\n                })\n\n                // if an array of object is about to loose existing property\n                // we consider it is the whole object is changed\n                // which is identified by upper path\n                return path.slice(0, -1)\n            }\n        }\n\n        if (value !== None) {\n            // Property INSERT case\n            target[p] = value;\n            this.afterSet({\n                path: path,\n                state: this._value,\n                value: value,\n                merged: mergeValue\n            })\n\n            // if an array of object is about to be extended by new property\n            // we consider it is the whole object is changed\n            // which is identified by upper path\n            return path.slice(0, -1)\n        }\n\n        // Non-existing property DELETE case\n        // no-op\n        return path;\n    }\n\n    update(paths: Path[]) {\n        if (this._batches) {\n            this._batchesPendingPaths = this._batchesPendingPaths || []\n            this._batchesPendingPaths = this._batchesPendingPaths.concat(paths)\n            return;\n        }\n\n        const actions: (() => void)[] = [];\n        this._subscribers.forEach(s => s.onSet(paths, actions));\n        actions.forEach(a => a());\n    }\n\n    afterSet(params: PluginCallbacksOnSetArgument) {\n        if (this._edition !== DestroyedEdition) {\n            this._edition += 1;\n            this._setSubscribers.forEach(cb => cb(params))\n        }\n    }\n\n    startBatch(path: Path, options?: { context?:  AnyContext }): void {\n        this._batches += 1\n\n        const cbArgument: Writeable<PluginCallbacksOnBatchArgument> = {\n            path: path\n        }\n        if (options && 'context' in options) {\n            cbArgument.context = options.context\n        }\n        if (this._value !== None) {\n            cbArgument.state = this._value\n        }\n        this._batchStartSubscribers.forEach(cb => cb(cbArgument))\n    }\n\n    finishBatch(path: Path, options?: { context?:  AnyContext }): void {\n        const cbArgument: Writeable<PluginCallbacksOnBatchArgument> = {\n            path: path\n        }\n        if (options && 'context' in options) {\n            cbArgument.context = options.context\n        }\n        if (this._value !== None) {\n            cbArgument.state = this._value\n        }\n        this._batchFinishSubscribers.forEach(cb => cb(cbArgument))\n\n        this._batches -= 1\n        if (this._batches === 0) {\n            if (this._batchesPendingPaths) {\n                const paths = this._batchesPendingPaths\n                this._batchesPendingPaths = undefined\n                this.update(paths)\n            }\n        }\n    }\n\n    postponeBatch(action: () => void): void {\n        this._batchesPendingActions = this._batchesPendingActions || []\n        this._batchesPendingActions.push(action)\n    }\n\n    getPlugin(pluginId: symbol) {\n        return this._plugins.get(pluginId)\n    }\n\n    register(plugin: Plugin) {\n        const existingInstance = this._plugins.get(plugin.id)\n        if (existingInstance) {\n            return;\n        }\n\n        const pluginCallbacks = plugin.create ? plugin.create(this.accessUnmounted()) :\n            plugin.init ? plugin.init(this.accessUnmounted()[self]) : {};\n        this._plugins.set(plugin.id, pluginCallbacks);\n        if (pluginCallbacks.onSet) {\n            this._setSubscribers.add((p) => pluginCallbacks.onSet!(p))\n        }\n        if (pluginCallbacks.onDestroy) {\n            this._destroySubscribers.add((p) => pluginCallbacks.onDestroy!(p))\n        }\n        if (pluginCallbacks.onBatchStart) {\n            this._batchStartSubscribers.add((p) => pluginCallbacks.onBatchStart!(p))\n        }\n        if (pluginCallbacks.onBatchFinish) {\n            this._batchFinishSubscribers.add((p) => pluginCallbacks.onBatchFinish!(p))\n        }\n    }\n\n    accessUnmounted() {\n        return new StateLinkImpl<StateValueAtRoot>(\n            this,\n            RootPath,\n            NoActionOnUpdate,\n            this.get(RootPath),\n            this.edition\n            // TODO downgraded plugin should not be used here as it affects all inherited links (which is temporary fixed in the useStateLink)\n            // instead optimisations are possible based on checks of onUpdateUsed === NoActionOnUpdate\n        ).with(Downgraded) // it does not matter how it is used, it is not subscribed anyway\n    }\n\n    subscribe(l: Subscriber) {\n        this._subscribers.add(l);\n    }\n\n    unsubscribe(l: Subscriber) {\n        this._subscribers.delete(l);\n    }\n\n    destroy() {\n        this._destroySubscribers.forEach(cb => cb(this._value !== None ? { state: this._value } : {}))\n        this._edition = DestroyedEdition\n    }\n\n    toJSON() {\n        throw new StateLinkInvalidUsageError(RootPath, ErrorId.ToJson_Value);\n    }\n}\n\nconst SynteticID = Symbol('SynteticTypeInferenceMarker');\nconst ValueCache = Symbol('ValueCache');\nconst NestedCache = Symbol('NestedCache');\nconst UnmountedCallback = Symbol('UnmountedCallback');\n\nconst NoActionOnUpdate = () => { /* empty */ };\nNoActionOnUpdate[UnmountedCallback] = true\n\nclass WrappedStateLinkImpl<S, R> implements WrappedStateLink<R>, StateMethodsDestroy {\n    // tslint:disable-next-line: variable-name\n    public __synteticTypeInferenceMarkerInf = SynteticID;\n    public disabledTracking: boolean | undefined;\n\n    constructor(\n        public readonly state: StateLinkImpl<S>,\n        public readonly transform: (state: StateLink<S>, prev: R | undefined) => R,\n    ) { }\n\n    access(): R {\n        return this.transform(this.state, undefined)\n    }\n\n    with(plugin: () => Plugin): this {\n        this.state.with(plugin);\n        return this;\n    }\n\n    wrap<R2>(transform: (state: R, prev: R2 | undefined) => R2) {\n        return new WrappedStateLinkImpl<S, R2>(this.state, (s, p) => {\n            return transform(this.transform(s, undefined), p)\n        })\n    }\n\n    destroy() {\n        this.state.destroy()\n    }\n}\n\ntype ErrorValueAtPath = any; //tslint:disable-line: no-any\n\nclass Promised {\n    public fullfilled?: true;\n    public error?: ErrorValueAtPath;\n    public resolver?: () => void;\n\n    constructor(public promise: Promise<StateValueAtPath> | undefined,\n        onResolve: (r: StateValueAtPath) => void,\n        onReject: () => void,\n        onPostResolve: () => void) {\n        if (!promise) {\n            promise = new Promise<StateValueAtRoot>(resolve => {\n                this.resolver = resolve;\n            })\n        }\n        this.promise = promise\n            .then(r => {\n                this.fullfilled = true\n                if (!this.resolver) {\n                    onResolve(r)\n                }\n            })\n            .catch(err => {\n                this.fullfilled = true\n                this.error = err\n                onReject()\n            })\n            .then(() => onPostResolve())\n    }\n}\n\nclass StateLinkImpl<S> implements StateLink<S>,\n    StateMethodsDestroy,\n    ExtendedStateLinkMixin<S>,\n    Subscribable, Subscriber {\n    public isDowngraded: boolean | undefined;\n    private subscribers: Set<Subscriber> | undefined;\n\n    private nestedLinksCache: Record<string | number, StateLinkImpl<S[keyof S]>> | undefined;\n\n    constructor(\n        public readonly state: Store,\n        public readonly path: Path,\n        public onUpdateUsed: (() => void),\n        public valueSource: S,\n        public valueEdition: number\n    ) { }\n\n    getUntracked(allowPromised?: boolean) {\n        if (this.valueEdition !== this.state.edition) {\n            this.valueSource = this.state.get(this.path)\n            this.valueEdition = this.state.edition\n\n            if (this.onUpdateUsed[UnmountedCallback]) {\n                // this link is not mounted to a component\n                // for example, it might be global link or\n                // a link which has been discarded after rerender\n                // but still captured by some callback or an effect\n                delete this[ValueCache]\n                delete this[NestedCache]\n            } else {\n                // this link is still mounted to a component\n                // populate cache again to ensure correct tracking of usage\n                // when React scans which states to rerender on update\n                if (ValueCache in this) {\n                    delete this[ValueCache]\n                    this.get(true)\n                }\n                if (NestedCache in this) {\n                    delete this[NestedCache]\n                    // tslint:disable-next-line no-unused-expression\n                    this.nested // trigger call to mark 'nested' as used again\n                }\n            }\n        }\n        if (this.valueSource === None && !allowPromised) {\n            if (this.state.promised && this.state.promised.error) {\n                throw this.state.promised.error;\n            }\n            throw new StateLinkInvalidUsageError(this.path, ErrorId.GetStateWhenPromised)\n        }\n        return this.valueSource;\n    }\n\n    get(allowPromised?: boolean) {\n        const currentValue = this.getUntracked(allowPromised)\n        if (this[ValueCache] === undefined) {\n            if (this.isDowngraded) {\n                this[ValueCache] = currentValue;\n            } else if (Array.isArray(currentValue)) {\n                this[ValueCache] = this.valueArrayImpl(currentValue);\n            } else if (typeof currentValue === 'object' && currentValue !== null) {\n                this[ValueCache] = this.valueObjectImpl(currentValue as unknown as object);\n            } else {\n                this[ValueCache] = currentValue;\n            }\n        }\n        return this[ValueCache] as S;\n    }\n\n    get value(): S {\n        return this.get()\n    }\n\n    get promised() {\n        const currentValue = this.get(true) // marks used\n        if (currentValue === None && this.state.promised && !this.state.promised.fullfilled) {\n            return true;\n        }\n        return false;\n    }\n\n    get error() {\n        const currentValue = this.get(true) // marks used\n        if (currentValue === None) {\n            if (this.state.promised && this.state.promised.fullfilled) {\n                return this.state.promised.error;\n            }\n            this.get() // will throw 'read while promised' exception\n        }\n        return undefined;\n    }\n\n    setUntracked(newValue: SetStateAction<S>, mergeValue?: Partial<StateValueAtPath>): Path {\n        if (typeof newValue === 'function') {\n            newValue = (newValue as ((prevValue: S) => S))(this.getUntracked());\n        }\n        if (typeof newValue === 'object' && newValue !== null && newValue[ProxyMarkerID]) {\n            throw new StateLinkInvalidUsageError(this.path, ErrorId.SetStateToValueFromState)\n        }\n        return this.state.set(this.path, newValue, mergeValue);\n    }\n\n    set(newValue: SetStateAction<S>) {\n        this.state.update([this.setUntracked(newValue)]);\n    }\n\n    mergeUntracked(sourceValue: SetPartialStateAction<S>): Path[] {\n        const currentValue = this.getUntracked()\n        if (typeof sourceValue === 'function') {\n            sourceValue = (sourceValue as Function)(currentValue);\n        }\n\n        let updatedPath: Path;\n        let deletedOrInsertedProps = false\n\n        if (Array.isArray(currentValue)) {\n            if (Array.isArray(sourceValue)) {\n                return [this.setUntracked(currentValue.concat(sourceValue) as unknown as S, sourceValue)]\n            } else {\n                const deletedIndexes: number[] = []\n                Object.keys(sourceValue).sort().forEach(i => {\n                    const index = Number(i);\n                    const newPropValue = sourceValue[index]\n                    if (newPropValue === None) {\n                        deletedOrInsertedProps = true\n                        deletedIndexes.push(index)\n                    } else {\n                        deletedOrInsertedProps = deletedOrInsertedProps || !(index in currentValue)\n                        currentValue[index] = newPropValue\n                    }\n                });\n                // indexes are ascending sorted as per above\n                // so, delete one by one from the end\n                // this way index positions do not change\n                deletedIndexes.reverse().forEach(p => {\n                    (currentValue as unknown as []).splice(p, 1)\n                })\n                updatedPath = this.setUntracked(currentValue, sourceValue)\n            }\n        } else if (typeof currentValue === 'object' && currentValue !== null) {\n            Object.keys(sourceValue).forEach(key => {\n                const newPropValue = sourceValue[key]\n                if (newPropValue === None) {\n                    deletedOrInsertedProps = true\n                    delete currentValue[key]\n                } else {\n                    deletedOrInsertedProps = deletedOrInsertedProps || !(key in currentValue)\n                    currentValue[key] = newPropValue\n                }\n            })\n            updatedPath = this.setUntracked(currentValue, sourceValue)\n        } else if (typeof currentValue === 'string') {\n            return [this.setUntracked((currentValue + String(sourceValue)) as unknown as S, sourceValue)]\n        } else {\n            return [this.setUntracked(sourceValue as S)]\n        }\n\n        if (updatedPath !== this.path || deletedOrInsertedProps) {\n            return [updatedPath]\n        }\n        return Object.keys(sourceValue).map(p => updatedPath.slice().concat(p))\n    }\n\n    merge(sourceValue: SetPartialStateAction<S>) {\n        this.state.update(this.mergeUntracked(sourceValue));\n    }\n\n    batch(action: (s: StateLink<S>) => void, options?: BatchOptions): void {\n        if (this.promised) {\n            const ifPromised = options && options.ifPromised || 'reject'\n            if (ifPromised === 'postpone') {\n                return this.state.postponeBatch(() => this.batch(action, options))\n            }\n            if (ifPromised === 'discard') {\n                return;\n            }\n            if (ifPromised === 'reject') {\n                this.get(); // this will throw (default behavior)\n            }\n        }\n        try {\n            this.state.startBatch(this.path, options)\n            action(this)\n        } finally {\n            this.state.finishBatch(this.path, options)\n        }\n    }\n\n    // remove in version 2, replace by rerender\n    update(paths: Path[]) {\n        this.state.update(paths)\n    }\n\n    rerender(paths: Path[]) {\n        this.state.update(paths)\n    }\n\n    denull(): InferredStateLinkDenullType<S>  {\n        const value = this.get()\n        if (value === null || value === undefined) {\n            return value as unknown as InferredStateLinkDenullType<S>;\n        }\n        return this as unknown as InferredStateLinkDenullType<S>;\n    }\n\n    with(plugin: () => Plugin): this;\n    with<R = never>(pluginId: symbol, alt?: () => R): [StateLink<S> & ExtendedStateLinkMixin<S>, PluginCallbacks] | R;\n    with<R = never>(plugin: (() => Plugin) | symbol, alt?: () => R):\n        this | [StateLink<S> & ExtendedStateLinkMixin<S>, PluginCallbacks] | R {\n        if (typeof plugin === 'function') {\n            const pluginMeta = plugin();\n            if (pluginMeta.id === DowngradedID) {\n                this.isDowngraded = true;\n                return this;\n            }\n            this.state.register(pluginMeta);\n            return this;\n        } else {\n            const instance = this.state.getPlugin(plugin);\n            if (instance) {\n                return [this, instance];\n            }\n            if (alt) {\n                return alt();\n            }\n            throw new StateLinkInvalidUsageError(this.path, ErrorId.GetUnknownPlugin, plugin.toString())\n        }\n    }\n\n    access() {\n        return this;\n    }\n\n    wrap<R>(transform: (state: StateLink<S>, prev: R | undefined) => R) {\n        return new WrappedStateLinkImpl<S, R>(this, transform)\n    }\n\n    destroy(): void {\n        this.state.destroy()\n    }\n\n    subscribe(l: Subscriber) {\n        if (this.subscribers === undefined) {\n            this.subscribers = new Set();\n        }\n        this.subscribers.add(l);\n    }\n\n    unsubscribe(l: Subscriber) {\n        this.subscribers!.delete(l);\n    }\n\n    onSet(paths: Path[], actions: (() => void)[]) {\n        this.updateIfUsed(paths, actions)\n    }\n\n    private updateIfUsed(paths: Path[], actions: (() => void)[]): boolean {\n        const update = () => {\n            if (this.isDowngraded &&\n                (ValueCache in this || NestedCache in this)) {\n                actions.push(this.onUpdateUsed);\n                return true;\n            }\n            for (let path of paths) {\n                const firstChildKey = path[this.path.length];\n                if (firstChildKey === undefined) {\n                    if (ValueCache in this || NestedCache in this) {\n                        actions.push(this.onUpdateUsed);\n                        return true;\n                    }\n                } else {\n                    const firstChildValue = this.nestedLinksCache && this.nestedLinksCache[firstChildKey];\n                    if (firstChildValue && firstChildValue.updateIfUsed(paths, actions)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        const updated = update();\n        if (!updated && this.subscribers !== undefined) {\n            this.subscribers.forEach(s => {\n                s.onSet(paths, actions)\n            })\n        }\n        return updated;\n    }\n\n    get keys(): InferredStateLinkKeysType<S> {\n        const value = this.get()\n        if (Array.isArray(value)) {\n            return Object.keys(value).map(i => Number(i)).filter(i => Number.isInteger(i)) as\n                unknown as InferredStateLinkKeysType<S>;\n        }\n        if (typeof value === 'object' && value !== null) {\n            return Object.keys(value) as unknown as InferredStateLinkKeysType<S>;\n        }\n        return undefined as InferredStateLinkKeysType<S>;\n    }\n\n    child(key: number | string) {\n        this.nestedLinksCache = this.nestedLinksCache || {};\n        const cachehit = this.nestedLinksCache[key];\n        if (cachehit) {\n            return cachehit;\n        }\n        const r = new StateLinkImpl(\n            this.state,\n            this.path.slice().concat(key),\n            this.onUpdateUsed,\n            this.valueSource[key],\n            this.valueEdition\n        )\n        if (this.isDowngraded) {\n            r.isDowngraded = true;\n        }\n        this.nestedLinksCache[key] = r;\n        return r;\n    }\n    \n    get nested(): InferredStateLinkNestedType<S> {\n        const currentValue = this.getUntracked()\n        if (this[NestedCache] === undefined) {\n            if (Array.isArray(currentValue)) {\n                this[NestedCache] = this.nestedArrayImpl(currentValue);\n            } else if (typeof currentValue === 'object' && currentValue !== null) {\n                this[NestedCache] = this.nestedObjectImpl(currentValue as unknown as object);\n            } else {\n                this[NestedCache] = undefined;\n            }\n        }\n        return this[NestedCache] as InferredStateLinkNestedType<S>;\n    }\n\n    private nestedArrayImpl(currentValue: StateValueAtPath[]): InferredStateLinkNestedType<S> {\n        this.nestedLinksCache = this.nestedLinksCache || {};\n        const proxyGetterCache = this.nestedLinksCache;\n\n        const getter = (target: object, key: PropertyKey) => {\n            if (key === 'length') {\n                return (target as []).length;\n            }\n            if (key in Array.prototype) {\n                return Array.prototype[key];\n            }\n            if (key === ProxyMarkerID) {\n                return this;\n            }\n            if (typeof key === 'symbol') {\n                return undefined;\n            }\n            const index = Number(key);\n            if (!Number.isInteger(index)) {\n                return undefined;\n            }\n            const cachehit = proxyGetterCache[index];\n            if (cachehit) {\n                return cachehit;\n            }\n            const r = new StateLinkImpl(\n                this.state,\n                this.path.slice().concat(index),\n                this.onUpdateUsed,\n                target[index],\n                this.valueEdition\n            )\n            if (this.isDowngraded) {\n                r.isDowngraded = true;\n            }\n            proxyGetterCache[index] = r;\n            return r;\n        };\n        return this.proxyWrap(currentValue, getter) as\n            unknown as InferredStateLinkNestedType<S>;\n    }\n\n    private valueArrayImpl(currentValue: StateValueAtPath[]): S {\n        return this.proxyWrap(currentValue,\n            (target: object, key: PropertyKey) => {\n                if (key === 'length') {\n                    return (target as []).length;\n                }\n                if (key in Array.prototype) {\n                    return Array.prototype[key];\n                }\n                if (key === ProxyMarkerID) {\n                    return this;\n                }\n                if (typeof key === 'symbol') {\n                    // allow clients to associate hidden cache with state values\n                    return target[key];\n                }\n                const index = Number(key);\n                if (!Number.isInteger(index)) {\n                    return undefined;\n                }\n                return (this.nested)![index].get();\n            },\n            (target: object, key: PropertyKey, value: StateValueAtPath) => {\n                if (typeof key === 'symbol') {\n                    // allow clients to associate hidden cache with state values\n                    target[key] = value;\n                    return true;\n                }\n                throw new StateLinkInvalidUsageError(this.path, ErrorId.SetProperty_Value)\n            }\n        ) as unknown as S;\n    }\n\n    private nestedObjectImpl(currentValue: object): InferredStateLinkNestedType<S> {\n        this.nestedLinksCache = this.nestedLinksCache || {};\n        const proxyGetterCache = this.nestedLinksCache;\n\n        const getter = (target: object, key: PropertyKey) => {\n            if (key === ProxyMarkerID) {\n                return this;\n            }\n            if (typeof key === 'symbol') {\n                return undefined;\n            }\n            const cachehit = proxyGetterCache[key];\n            if (cachehit) {\n                return cachehit;\n            }\n            const r = new StateLinkImpl(\n                this.state,\n                this.path.slice().concat(key.toString()),\n                this.onUpdateUsed,\n                target[key],\n                this.valueEdition\n            );\n            if (this.isDowngraded) {\n                r.isDowngraded = true;\n            }\n            proxyGetterCache[key] = r;\n            return r;\n        };\n        return this.proxyWrap(currentValue, getter) as\n            unknown as InferredStateLinkNestedType<S>;\n    }\n\n    private valueObjectImpl(currentValue: object): S {\n        return this.proxyWrap(currentValue,\n            (target: object, key: PropertyKey) => {\n                if (key === ProxyMarkerID) {\n                    return this;\n                }\n                if (typeof key === 'symbol') {\n                    // allow clients to associate hidden cache with state values\n                    return target[key];\n                }\n                return (this.nested)![key].value;\n            },\n            (target: object, key: PropertyKey, value: StateValueAtPath) => {\n                if (typeof key === 'symbol') {\n                    // allow clients to associate hidden cache with state values\n                    target[key] = value;\n                    return true;\n                }\n                throw new StateLinkInvalidUsageError(this.path, ErrorId.SetProperty_Value)\n            }\n        ) as unknown as S;\n    }\n\n    // tslint:disable-next-line: no-any\n    private proxyWrap(objectToWrap: any,\n        // tslint:disable-next-line: no-any\n        getter: (target: any, key: PropertyKey) => any,\n        // tslint:disable-next-line: no-any\n        setter?: (target: any, p: PropertyKey, value: any, receiver: any) => boolean\n    ) {\n        const onInvalidUsage = (op: ErrorId) => {\n            throw new StateLinkInvalidUsageError(this.path, op)\n        }\n        return new Proxy(objectToWrap, {\n            getPrototypeOf: (target) => {\n                return Object.getPrototypeOf(target);\n            },\n            setPrototypeOf: (target, v) => {\n                return onInvalidUsage(ErrorId.SetPrototypeOf_Value)\n            },\n            isExtensible: (target) => {\n                // should satisfy the invariants:\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n                // Reference/Global_Objects/Proxy/handler/isExtensible#Invariants\n                return Object.isExtensible(target);\n            },\n            preventExtensions: (target) => {\n                return onInvalidUsage(ErrorId.PreventExtensions_Value)\n            },\n            getOwnPropertyDescriptor: (target, p) => {\n                const origin = Object.getOwnPropertyDescriptor(target, p);\n                if (origin && Array.isArray(target) && p in Array.prototype) {\n                    return origin;\n                }\n                return origin && {\n                    configurable: true, // JSON.stringify() does not work for an object without it\n                    enumerable: origin.enumerable,\n                    get: () => getter(target as object, p),\n                    set: undefined\n                };\n            },\n            has: (target, p) => {\n                if (typeof p === 'symbol') {\n                    return false;\n                }\n                return p in target;\n            },\n            get: getter,\n            set: setter || ((target, p, value, receiver) => {\n                return onInvalidUsage(ErrorId.SetProperty_Value)\n            }),\n            deleteProperty: (target, p) => {\n                return onInvalidUsage(ErrorId.DeleteProperty_Value)\n            },\n            defineProperty: (target, p, attributes) => {\n                return onInvalidUsage(ErrorId.DefineProperty_Value)\n            },\n            enumerate: (target) => {\n                if (Array.isArray(target)) {\n                    return Object.keys(target).concat('length');\n                }\n                return Object.keys(target);\n            },\n            ownKeys: (target) => {\n                if (Array.isArray(target)) {\n                    return Object.keys(target).concat('length');\n                }\n                return Object.keys(target);\n            },\n            apply: (target, thisArg, argArray?) => {\n                return onInvalidUsage(ErrorId.Apply_Value)\n            },\n            construct: (target, argArray, newTarget?) => {\n                return onInvalidUsage(ErrorId.Construct_Value)\n            }\n        });\n    }\n    \n    get [self](): State<S> {\n        return proxyWrap(this.path, \n            this.valueSource,\n            () => {\n                this.get() // get latest & mark used\n                return this.valueSource\n            },\n        (_, key) => {\n            if (key === StateMarkerID) {\n                // should be tested before target is obtained\n                // to keep it clean from usage marker\n                return this;\n            }\n            if (typeof key === 'symbol') {\n                if (key === self) {\n                    return this\n                } else {\n                    return undefined\n                }\n            } else {\n                if (key === 'toJSON') {\n                    throw new StateLinkInvalidUsageError(this.path, ErrorId.ToJson_State);\n                }\n                \n                const currentValue = this.getUntracked(true);\n                if (// if currentValue is primitive type\n                    (typeof currentValue !== 'object' || currentValue === null) &&\n                    // if promised, it will be none\n                    currentValue !== none) {\n                    switch (key) {\n                        case 'path':\n                            return this.path\n                        case 'keys':\n                            return this.keys\n                        case 'value':\n                            return this.value\n                        case 'get':\n                            return () => this.get()\n                        case 'set':\n                            return (p: SetStateAction<S>) => this.set(p)\n                        case 'merge':\n                            return (p: SetPartialStateAction<S>) => this.merge(p)\n                        case 'map':\n                            // tslint:disable-next-line: no-any\n                            return (...args: any[]) => this.map(args[0], args[1], args[2], args[3])\n                        case 'attach':\n                            return (p: symbol) => this.attach(p)\n                        default:\n                            this.get() // mark used\n                            throw new StateLinkInvalidUsageError(this.path, ErrorId.GetStatePropertyWhenPrimitive)\n                    }\n                }\n\n                this.get() // mark used\n                if (Array.isArray(currentValue)) {\n                    if (key === 'length') {\n                        return currentValue.length;\n                    }\n                    if (key in Array.prototype) {\n                        return Array.prototype[key];\n                    }\n                    const index = Number(key);\n                    if (!Number.isInteger(index)) {\n                        return undefined;\n                    }\n                    return this.child(index)[self]\n                }\n                return this.child(key.toString())[self]\n            }\n        },\n        (_, key, value) => {\n            throw new StateLinkInvalidUsageError(this.path, ErrorId.SetProperty_State)\n        }) as unknown as State<S>;\n    }\n    \n    map<R, RL, RE, C>(\n        action: (s: State<S>) => R,\n        onPromised: (s: State<S>) => RL,\n        onError: (e: StateErrorAtRoot, s: State<S>) => RE,\n        context?: Exclude<C, Function>\n    ): R | RL | RE;\n    map<R, RL, C>(\n        action: (s: State<S>) => R,\n        onPromised: (s: State<S>) => RL,\n        context?: Exclude<C, Function>\n    ): R | RL;\n    map<R, C>(\n        action: (s: State<S>) => R,\n        context?: Exclude<C, Function>\n    ): R;\n    map(): [boolean, StateErrorAtRoot | undefined, S | undefined];\n    map<R, RL, RE, C>(\n        action?: (s: State<S>) => R,\n        onPromised?: ((s: State<S>) => RL) | Exclude<C, Function>,\n        onError?: ((e: StateErrorAtRoot, s: State<S>) => RE) | Exclude<C, Function>,\n        context?: Exclude<C, Function>\n    ): InferredStateOrnullType<S> | R | RL | RE | [boolean, StateErrorAtRoot | undefined, S | undefined] {\n        if (!action) {\n            if (this.promised) {\n                return [true, undefined, undefined]\n            }\n            if (this.error) {\n                return [false, this.error, undefined]\n            }\n            return [false, undefined, this.value]\n        }\n        \n        const contextArg = typeof onPromised === 'function'\n            ? (typeof onError === 'function' ? context : onError)\n            : onPromised;\n\n        const runBatch = ((actionArg: () => (R | RL | RE)) => {\n            if (contextArg !== undefined) {\n                const opts = { context: contextArg }\n                try {\n                    this.state.startBatch(this.path, opts)\n                    return actionArg()\n                } finally {\n                    this.state.finishBatch(this.path, opts)\n                }\n            } else {\n                return actionArg()\n            }\n        })\n            \n        if (typeof onPromised === 'function' && this.promised) {\n            return runBatch(() => {\n                const r = (onPromised as ((s: State<S>) => RL))(this[self])\n                if (r as unknown as symbol === postpone) {\n                    // tslint:disable-next-line: no-any\n                    this.state.postponeBatch(\n                        () => this.map(action, onPromised as any, onError as any, context as any))\n                }\n                return r;\n            })\n        }\n        \n        if (typeof onError === 'function' && this.error) {\n            return runBatch(() => (onError as ((e: StateErrorAtRoot, s: State<S>) => RE))(this.error, this[self]))\n        }\n        \n        return runBatch(() => action(this[self]))\n    }\n\n    get ornull(): InferredStateOrnullType<S> {\n        const r = this.denull();\n        if (r) {\n            return r[self] as InferredStateOrnullType<S>;\n        }\n        return r as unknown as InferredStateOrnullType<S>;        \n    }\n\n    attach(plugin: () => Plugin): State<S>\n    attach(pluginId: symbol): [PluginCallbacks | Error, PluginStateControl<S>]\n    attach(p: (() => Plugin) | symbol):\n        State<S> | [PluginCallbacks | Error, PluginStateControl<S>] {\n        if (typeof p === 'function') {\n            const pluginMeta = p();\n            if (pluginMeta.id === DowngradedID) {\n                this.isDowngraded = true;\n                return this[self];\n            }\n            this.state.register(pluginMeta);\n            return this[self];\n        } else {\n            const instance = this.state.getPlugin(p);\n            const capturedThis = this;\n            return [instance || (new StateLinkInvalidUsageError(this.path, ErrorId.GetUnknownPlugin, p.toString())), \n                // TODO need to create an instance until version 2\n                // because of the incompatible return types from methods\n                {\n                    getUntracked() {\n                        return capturedThis.getUntracked()\n                    },\n                    setUntracked(v): Path[] {\n                        return [capturedThis.setUntracked(v)]\n                    },\n                    mergeUntracked(v): Path[] {\n                        return capturedThis.mergeUntracked(v)\n                    },\n                    rerender(paths) {\n                        return capturedThis.rerender(paths);\n                    }\n                }\n            ];\n        }\n    }\n}\n\nfunction proxyWrap(\n    path: Path,\n    // tslint:disable-next-line: no-any\n    targetBootstrap: any,\n    // tslint:disable-next-line: no-any\n    targetGetter: () => any,\n    // tslint:disable-next-line: no-any\n    propertyGetter: (unused: any, key: PropertyKey) => any,\n    // tslint:disable-next-line: no-any\n    propertySetter: (unused: any, p: PropertyKey, value: any, receiver: any) => boolean\n) {\n    const onInvalidUsage = (op: ErrorId) => {\n        throw new StateLinkInvalidUsageError(path, op)\n    }\n    if (typeof targetBootstrap !== 'object' || targetBootstrap === null) {\n        targetBootstrap = {}\n    }\n    return new Proxy(targetBootstrap, {\n        getPrototypeOf: (target) => {\n            // should satisfy the invariants:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf#Invariants\n            const targetReal = targetGetter()\n            if (targetReal === undefined || targetReal === null) {\n                return null;\n            }\n            return Object.getPrototypeOf(targetReal);\n        },\n        setPrototypeOf: (target, v) => {\n            return onInvalidUsage(ErrorId.SetPrototypeOf_State)\n        },\n        isExtensible: (target) => {\n            // should satisfy the invariants:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible#Invariants\n            return true; // required to satisfy the invariants of the getPrototypeOf\n            // return Object.isExtensible(target);\n        },\n        preventExtensions: (target) => {\n            return onInvalidUsage(ErrorId.PreventExtensions_State)\n        },\n        getOwnPropertyDescriptor: (target, p) => {\n            const targetReal = targetGetter()\n            if (targetReal === undefined || targetReal === null) {\n                return undefined;\n            }\n            const origin = Object.getOwnPropertyDescriptor(targetReal, p);\n            if (origin && Array.isArray(targetReal) && p in Array.prototype) {\n                return origin;\n            }\n            return origin && {\n                configurable: true, // JSON.stringify() does not work for an object without it\n                enumerable: origin.enumerable,\n                get: () => propertyGetter(undefined, p),\n                set: undefined\n            };\n        },\n        has: (target, p) => {\n            if (typeof p === 'symbol') {\n                return false;\n            }\n            const targetReal = targetGetter()\n            if (typeof targetReal === 'object' && targetReal !== null) {\n                return p in targetReal;\n            }\n            return false;\n        },\n        get: propertyGetter,\n        set: propertySetter,\n        deleteProperty: (target, p) => {\n            return onInvalidUsage(ErrorId.DeleteProperty_State)\n        },\n        defineProperty: (target, p, attributes) => {\n            return onInvalidUsage(ErrorId.DefineProperty_State)\n        },\n        enumerate: (target) => {\n            const targetReal = targetGetter()\n            if (Array.isArray(targetReal)) {\n                return Object.keys(targetReal).concat('length');\n            }\n            if (targetReal === undefined || targetReal === null) {\n                return [];\n            }\n            return Object.keys(targetReal);\n        },\n        ownKeys: (target) => {\n            const targetReal = targetGetter()\n            if (Array.isArray(targetReal)) {\n                return Object.keys(targetReal).concat('length');\n            }\n            if (targetReal === undefined || targetReal === null) {\n                return [];\n            }\n            return Object.keys(targetReal);\n        },\n        apply: (target, thisArg, argArray?) => {\n            return onInvalidUsage(ErrorId.Apply_State)\n        },\n        construct: (target, argArray, newTarget?) => {\n            return onInvalidUsage(ErrorId.Construct_State)\n        }\n    });\n}\n\nfunction createStore<S>(initial: SetInitialStateAction<S>): Store {\n    let initialValue: S | Promise<S> = initial as (S | Promise<S>);\n    if (typeof initial === 'function') {\n        initialValue = (initial as (() => S | Promise<S>))();\n    }\n    if (typeof initialValue === 'object' && initialValue !== null && initialValue[ProxyMarkerID]) {\n        throw new StateLinkInvalidUsageError(RootPath, ErrorId.InitStateToValueFromState)\n    }\n    return new Store(initialValue);\n}\n\nfunction useSubscribedStateLink<S>(\n    state: Store,\n    path: Path,\n    update: () => void,\n    subscribeTarget: Subscribable,\n    disabledTracking: boolean | undefined\n) {\n    const link = new StateLinkImpl<S>(\n        state,\n        path,\n        update,\n        state.get(path),\n        state.edition\n    );\n    if (disabledTracking) {\n        link.with(Downgraded)\n    }\n    React.useEffect(() => {\n        subscribeTarget.subscribe(link);\n        return () => {\n            link.onUpdateUsed[UnmountedCallback] = true\n            subscribeTarget.unsubscribe(link);\n        }\n    });\n    return link;\n}\n\nfunction injectTransform<S, R>(\n    link: StateLinkImpl<S>,\n    transform: (state: StateLink<S>, prev: R | undefined) => R\n) {\n    if (link.onUpdateUsed[UnmountedCallback]) {\n        // this is unmounted link\n        return transform(link, undefined);\n    }\n    let injectedOnUpdateUsed: (() => void) | undefined = undefined;\n    const originOnUpdateUsed = link.onUpdateUsed;\n    link.onUpdateUsed = () => {\n        if (injectedOnUpdateUsed) {\n            return injectedOnUpdateUsed();\n        }\n        return originOnUpdateUsed();\n    }\n\n    const result = transform(link, undefined);\n    const stateMemoEquals: ((a: R, b: R) => boolean) | undefined = link[StateMemoID];\n    if (stateMemoEquals === undefined) {\n        return result;\n    }\n    delete link[StateMemoID];\n\n    injectedOnUpdateUsed = () => {\n        const updatedResult = transform(link, result);\n        // if result is not changed, it does not affect the rendering result too\n        // so, we skip triggering rerendering in this case\n        if (!stateMemoEquals(updatedResult, result)) {\n            originOnUpdateUsed();\n        }\n    }\n    return result;\n}\n\n///\n/// EXTERNAL DEPRECATED SYMBOLS (left for backward compatibility, will be removed in version 2)\n///\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated use source directly instead\n */\nexport function useStateLinkUnmounted<S>(\n    source: DestroyableStateLink<S>,\n): StateLink<S>;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated use source.wrap(transform).access() instead\n */\nexport function useStateLinkUnmounted<S, R>(\n    source: DestroyableStateLink<S>,\n    transform: (state: StateLink<S>) => R\n): R;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated use source.access() instead\n */\nexport function useStateLinkUnmounted<R>(\n    source: DestroyableWrappedStateLink<R>,\n): R;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated use source directly or source.wrap(transform).access() instead\n */\nexport function useStateLinkUnmounted<S, R>(\n    source: DestroyableStateLink<S> | DestroyableWrappedStateLink<R>,\n    transform?: (state: StateLink<S>) => R\n): StateLink<S> | R {\n    if (source instanceof WrappedStateLinkImpl) {\n        return source.access()\n    }\n    if (transform) {\n        return transform(source as DestroyableStateLink<S>)\n    }\n    return source as DestroyableStateLink<S>;\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @depracated default export is deprecated\n */\nexport default useStateLink;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type NestedInferredLink<S> = InferredStateLinkNestedType<S>;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type NestedInferredKeys<S> = InferredStateLinkKeysType<S>;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type DestroyableStateLink<S> =\n    StateLink<S> & StateMethodsDestroy;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type DestroyableWrappedStateLink<R> =\n    WrappedStateLink<R> & StateMethodsDestroy;\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type StateRef<S> = StateInf<StateLink<S>>\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type StateInf<S> = S extends StateLink<infer U> ? DestroyableStateLink<U> : DestroyableWrappedStateLink<S>\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type StateLinkPlugable<S> = ExtendedStateLinkMixin<S>;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type InitialValueAtRoot<S> = SetInitialStateAction<S>;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type InferredStateLinkNestedType<S> =\n    S extends ReadonlyArray<(infer U)> ? ReadonlyArray<StateLink<U>> :\n    S extends null ? undefined :\n    S extends object ? { readonly [K in keyof Required<S>]: StateLink<S[K]>; } :\n    undefined;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type InferredStateLinkKeysType<S> = InferredStateKeysType<S>;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type InferredStateLinkDenullType<S> =\n    S extends undefined ? undefined :\n    S extends null ? null : StateLink<S>;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport interface BatchOptions {\n    ifPromised?: 'postpone' | 'discard' | 'reject' | 'execute',\n    context?: AnyContext;\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport const None = none;\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport interface StateLink<S> extends StateMethods<S> {\n    readonly promised: boolean;\n    readonly error: StateErrorAtRoot | undefined; //tslint:disable-line: no-any\n    readonly nested: InferredStateLinkNestedType<S>;\n    denull(): InferredStateLinkDenullType<S>;\n    batch(action: (s: StateLink<S>) => void, options?: BatchOptions): void;\n    wrap<R>(transform: (state: StateLink<S>, prev: R | undefined) => R): WrappedStateLink<R>;\n    with(plugin: () => Plugin): this;\n    with<R = never>(pluginId: symbol, alt?: () => R): [StateLink<S> & ExtendedStateLinkMixin<S>, PluginCallbacks] | R;\n    access(): StateLink<S>;\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport type DestroyMixin = StateMethodsDestroy\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport interface WrappedStateLink<R> {\n    __synteticTypeInferenceMarkerInf: symbol;\n    access(): R;\n    with(plugin: () => Plugin): this;\n    wrap<R2>(transform: (state: R, prev: R2 | undefined) => R2): WrappedStateLink<R2>\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport interface ExtendedStateLinkMixin<S> {\n    getUntracked(): S;\n    setUntracked(newValue: SetStateAction<S>): Path;\n    mergeUntracked(mergeValue: SetPartialStateAction<S>): Path | Path[];\n    update(paths: Path[]): void;\n}\n\n/**\n * @hidden\n * @ignore\n * @internal\n * @deprecated declared for backward compatibility\n */\nexport interface Plugin {\n    readonly create?: (state: StateLink<StateValueAtRoot>) => PluginCallbacks;\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE;AACnC,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;AACzC,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;AACpF,QAAQ,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACnF,IAAI,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AACF;AACO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;AAChC,IAAI,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;AAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AACzF;;ACqBA;;;;IAIa,IAAI,GAAG,MAAM,CAAC,MAAM,EAAC;AAElC;;;IAGa,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAC;AAE1C;;;;IAIa,IAAI,GAAG,MAAM,CAAC,MAAM,EAAsB;SAiZvC,eAAe,CAC3B,OAAiC,EACjC,SAA6D;IAG7D,IAAM,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,eAAe,EAAsB,CAAA;IAC5E,IAAI,eAAe,CAAC,UAAU,CAAC,EAAE;QAC7B,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAA;KAC9C;IACD,IAAI,SAAS,EAAE;QACX,OAAO,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;KACnC;IACD,OAAO,SAAS,CAAA;AACpB,CAAC;SAiDe,YAAY,CACxB,MAAqE,EACrE,SAA2D;IAErD,IAAA,KACF,MAAM,YAAY,aAAa;QAC3B,CAAC,MAA0B,EAAE,SAAS,CAAC;QACvC,MAAM,YAAY,oBAAoB;YAClC,CAAC,MAAM,CAAC,KAAyB,EAAE,MAAM,CAAC,SAAS,CAAC;YACpD,CAAC,SAAS,EAAE,SAAS,CAAC,EAL3B,UAAU,QAAA,EAAE,EAAE,QAKa,CAAC;IACnC,IAAI,UAAU,EAAE;QACZ,IAAI,UAAU,CAAC,YAAY,KAAK,gBAAgB,EAAE;;;YAGxC,IAAA,KAAoB,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,EAA9D,OAAK,QAAA,EAAE,UAAQ,QAA+C,CAAC;YACtE,IAAM,IAAI,GAAG,sBAAsB,CAC/B,OAAK,CAAC,KAAK,EACX,UAAU,CAAC,IAAI,EACf,cAAM,OAAA,UAAQ,CAAC,EAAE,KAAK,EAAE,OAAK,CAAC,KAAK,EAAE,CAAC,GAAA,EACtC,OAAK,CAAC,KAAK,EACX,SAAS,CAAC,CAAC;YACf,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC;SAChD;aAAM;;;YAGG,IAAA,KAAe,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAA9B,UAAQ,QAAsB,CAAC;YACxC,IAAM,IAAI,GAAG,sBAAsB,CAC/B,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,IAAI,EACf,cAAM,OAAA,UAAQ,CAAC,EAAE,CAAC,GAAA,EAClB,UAAU,EACV,UAAU,CAAC,YAAY,CAAC,CAAC;YAC7B,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC;SAChD;KACJ;SAAM;;;QAGG,IAAA,KAAoB,KAAK,CAAC,QAAQ,CAAC,cAAM,QAAC,EAAE,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,EAAE,IAAC,CAAC,EAAzE,OAAK,QAAA,EAAE,UAAQ,QAA0D,CAAC;QACjF,IAAM,IAAI,GAAG,sBAAsB,CAC/B,OAAK,CAAC,KAAK,EACX,QAAQ,EACR,cAAM,OAAA,UAAQ,CAAC,EAAE,KAAK,EAAE,OAAK,CAAC,KAAK,EAAE,CAAC,GAAA,EACtC,OAAK,CAAC,KAAK,EACX,SAAS,CAAC,CAAC;QACf,KAAK,CAAC,SAAS,CAAC,cAAM,OAAA,cAAM,OAAA,OAAK,CAAC,KAAK,CAAC,OAAO,EAAE,GAAA,GAAA,EAAE,EAAE,CAAC,CAAC;QACvD,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAA;SACtC;QACD,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC;KAChD;AACL,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BgB,WAAW,CACvB,OAAiC;IAEjC,IAAM,SAAS,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;IAC3C,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE;QACzB,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAA;KAC5C;IACD,OAAO,SAAS,CAAC,IAAI,CAAiC,CAAC;AAC3D,CAAC;SA8De,QAAQ,CACpB,MAA2C;IAE3C,IAAI,oBAAoB,GAAG,IAAI,CAAA;IAC/B,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;QAC/C,IAAM,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC,CAAA;QAChC,IAAI,EAAE,EAAE;;YAEJ,MAAM,GAAG,EAAE,CAAC;YACZ,oBAAoB,GAAG,KAAK,CAAA;SAC/B;KACJ;IACD,IAAM,SAAS,GAAG,YAAY,CAAC,MAAkC,CAAC,CAAC;IACnE,IAAI,oBAAoB,IAAI,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC9C,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAA;KACzC;IACD,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AA0FD;;;;;;SAMgB,aAAa,CACzB,KAIC;IAID,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;QAC5B,IAAM,MAAM,GAAG,QAAQ,CAAI,KAAK,CAAC,KAAoB,CAAC,CAAC;QACvD,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAqB,CAAC,CAAC;KAChD;SAAM;QACH,IAAM,MAAM,GAAG,YAAY,CAAQ,KAAK,CAAC,KAAoB,EAAE,KAAK,CAAC,SAAwB,CAAC,CAAC;QAC/F,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAqB,CAAC,CAAC;KAChD;AACL,CAAC;AAED;;;;;;SAMgB,SAAS,CACrB,SAA0D,EAC1D,MAAsC;IACtC,OAAO,UAAC,IAAkB,EAAE,IAAmB;QAC3C,IAAI,CAAC,WAAW,CAAC,GAAG,MAAM,KAAK,UAAC,CAAI,EAAE,CAAI,IAAK,QAAC,CAAC,KAAK,CAAC,IAAC,CAAC,CAAA;QACzD,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAChC,CAAA;AACL,CAAC;AAED;;;;;;;;;;;;;;;SAegB,UAAU;IACtB,OAAO;QACH,EAAE,EAAE,YAAY;KACnB,CAAA;AACL,CAAC;AAED;;;;;;;IAOa,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE;AAW7C;;;;;;;;;;;;;SAagB,QAAQ,CAAI,KAA8B;IACtD,IAAI,KAAK,CAAC,aAAa,CAAC,EAAE;QACtB,IAAM,MAAM,GAAI,KAAkB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,MAAM,CAAC,CAAC,CAAC,YAAY,KAAK,EAAE;YAC5B,OAAO,uBAAuB,CAAC;SAClC;QACD,OAAO,MAAM,CAAC,CAAC,CAAuB,CAAC;KAC1C;SAAM;QACH,IAAM,MAAM,GAAI,KAAsB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAM,OAAA,SAAS,GAAA,CAAC,CAAC;QACzE,IAAI,MAAM,EAAE;YACR,OAAO,MAAM,CAAC,CAAC,CAAuB,CAAC;SAC1C;QACD,OAAO,uBAAuB,CAAC;KAClC;AACL,CAAC;AAED;AACA;AACA;AAEA,IAAM,uBAAuB,GAAuB;IAChD,KAAK,iBAAY;IACjB,GAAG,iBAAY;CAClB,CAAA;AAED,IAAK,OA0BJ;AA1BD,WAAK,OAAO;IACR,iFAA+B,CAAA;IAC/B,+EAA8B,CAAA;IAC9B,uEAA0B,CAAA;IAC1B,uEAA0B,CAAA;IAC1B,+EAA8B,CAAA;IAC9B,yEAA2B,CAAA;IAC3B,yFAAmC,CAAA;IACnC,uDAAkB,CAAA;IAClB,uDAAkB,CAAA;IAClB,+DAAsB,CAAA;IAEtB,iEAAuB,CAAA;IACvB,iEAAuB,CAAA;IACvB,uEAA0B,CAAA;IAC1B,uEAA0B,CAAA;IAC1B,6EAA6B,CAAA;IAC7B,6EAA6B,CAAA;IAC7B,uEAA0B,CAAA;IAC1B,uEAA0B,CAAA;IAC1B,uEAA0B,CAAA;IAC1B,uEAA0B,CAAA;IAC1B,6DAAqB,CAAA;IACrB,6DAAqB,CAAA;IACrB,qDAAiB,CAAA;IACjB,qDAAiB,CAAA;AACrB,CAAC,EA1BI,OAAO,KAAP,OAAO,QA0BX;AAED;IAAyC,8CAAK;IAC1C,oCAAY,IAAU,EAAE,EAAW,EAAE,OAAgB;eACjD,kBAAM,sBAAoB,EAAE,iBAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAG,OAAO,GAAG,gBAAc,OAAS,GAAG,EAAE,SAAK;aAChG,4DAA0D,EAAI,CAAA,CAAC;KACtE;IACL,iCAAC;AAAD,CALA,CAAyC,KAAK,GAK7C;AAWD,IAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AAC1C,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AACxC,IAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAC5C;;;;;;IAMa,aAAa,GAAG,MAAM,CAAC,OAAO,EAAE;AAE7C,IAAM,QAAQ,GAAS,EAAE,CAAC;AAC1B,IAAM,gBAAgB,GAAG,CAAC,CAAC,CAAA;AAI3B;IAiBI,eAAoB,MAAwB;QAAxB,WAAM,GAAN,MAAM,CAAkB;QAhBpC,aAAQ,GAAW,CAAC,CAAC;QAErB,iBAAY,GAAoB,IAAI,GAAG,EAAE,CAAC;QAC1C,oBAAe,GAA4C,IAAI,GAAG,EAAE,CAAC;QACrE,wBAAmB,GAAgD,IAAI,GAAG,EAAE,CAAC;QAC7E,2BAAsB,GAAmD,IAAI,GAAG,EAAE,CAAC;QACnF,4BAAuB,GAAoD,IAAI,GAAG,EAAE,CAAC;QAErF,aAAQ,GAAiC,IAAI,GAAG,EAAE,CAAC;QAInD,aAAQ,GAAG,CAAC,CAAC;QAKjB,IAAI,OAAO,MAAM,KAAK,QAAQ;YAC1B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;YACpC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;YAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;SACrB;aAAM,IAAI,MAAM,KAAK,IAAI,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;SAClD;KACJ;IAED,8BAAc,GAAd,UAAe,QAAsC;QAArD,iBA2BC;QA1BG,IAAM,QAAQ,GAAG,IAAI,QAAQ,CACzB,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,SAAS,EAChD,UAAC,CAAmB;YAChB,IAAI,KAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,KAAI,CAAC,OAAO,KAAK,gBAAgB,EAAE;gBACjE,KAAI,CAAC,SAAS,GAAG,SAAS,CAAA;gBAC1B,KAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,CAAC,CAAA;gBAChC,KAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;aAC1B;SACJ,EACD;YACI,IAAI,KAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,KAAI,CAAC,OAAO,KAAK,gBAAgB,EAAE;gBACjE,KAAI,CAAC,QAAQ,IAAI,CAAC,CAAA;gBAClB,KAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;aAC1B;SACJ,EACD;YACI,IAAI,KAAI,CAAC,sBAAsB;gBAC3B,KAAI,CAAC,MAAM,KAAK,IAAI;gBACpB,KAAI,CAAC,OAAO,KAAK,gBAAgB,EAAE;gBACnC,IAAM,OAAO,GAAG,KAAI,CAAC,sBAAsB,CAAA;gBAC3C,KAAI,CAAC,sBAAsB,GAAG,SAAS,CAAA;gBACvC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,GAAA,CAAC,CAAA;aAC5B;SACJ,CACJ,CAAC;QACF,OAAO,QAAQ,CAAC;KACnB;IAED,sBAAI,0BAAO;aAAX;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;OAAA;IAED,sBAAI,2BAAQ;aAAZ;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;OAAA;IAED,mBAAG,GAAH,UAAI,IAAU;QACV,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,MAAM,KAAK,IAAI,EAAE;YACjB,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;YACV,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAED,mBAAG,GAAH,UAAI,IAAU,EAAE,KAAuB,EAAE,UAAiD;QACtF,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;YACnB,MAAM,IAAI,0BAA0B,CAAC,IAAI,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAA;SAC5E;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;;YAGnB,IAAM,QAAQ,GAA4C;gBACtD,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,KAAK;gBACZ,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,IAAI,CAAC,MAAM;gBACrB,MAAM,EAAE,UAAU;aACrB,CAAA;YACD,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;gBAC/C,OAAO,QAAQ,CAAC,KAAK,CAAA;gBACrB,OAAO,QAAQ,CAAC,KAAK,CAAA;aACxB;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;gBACtE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;gBAC3C,KAAK,GAAG,IAAI,CAAA;gBACZ,OAAO,QAAQ,CAAC,KAAK,CAAA;gBACrB,OAAO,QAAQ,CAAC,KAAK,CAAA;aACxB;iBAAM,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACnD,MAAM,IAAI,0BAA0B,CAAC,IAAI,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAA;aAC3E;YAED,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;YAC5B,IAAI,SAAS,KAAK,IAAI,EAAE;gBACpB,OAAO,QAAQ,CAAC,QAAQ,CAAA;aAC3B;YACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YAEvB,IAAI,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI;gBAC1C,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;gBACzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;aAC3B;YAED,OAAO,IAAI,CAAC;SACf;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;YAC/D,MAAM,IAAI,0BAA0B,CAAC,IAAI,EAAE,OAAO,CAAC,wBAAwB,CAAC,CAAA;SAC/E;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACzC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAC/B,IAAI,CAAC,IAAI,MAAM,EAAE;YACb,IAAI,KAAK,KAAK,IAAI,EAAE;;gBAEhB,IAAI,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACzB,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC;oBACV,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,KAAK,EAAE,KAAK;oBACZ,QAAQ,EAAE,SAAS;oBACnB,MAAM,EAAE,UAAU;iBACrB,CAAC,CAAA;gBAEF,OAAO,IAAI,CAAC;aACf;iBAAM;;gBAEH,IAAI,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACzB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;oBAChD,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACtB;qBAAM;oBACH,OAAO,MAAM,CAAC,CAAC,CAAC,CAAA;iBACnB;gBACD,IAAI,CAAC,QAAQ,CAAC;oBACV,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,QAAQ,EAAE,SAAS;oBACnB,MAAM,EAAE,UAAU;iBACrB,CAAC,CAAA;;;;gBAKF,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;aAC3B;SACJ;QAED,IAAI,KAAK,KAAK,IAAI,EAAE;;YAEhB,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI,CAAC,MAAM;gBAClB,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,UAAU;aACrB,CAAC,CAAA;;;;YAKF,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;SAC3B;;;QAID,OAAO,IAAI,CAAC;KACf;IAED,sBAAM,GAAN,UAAO,KAAa;QAChB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,IAAI,EAAE,CAAA;YAC3D,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YACnE,OAAO;SACV;QAED,IAAM,OAAO,GAAmB,EAAE,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,GAAA,CAAC,CAAC;QACxD,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,GAAA,CAAC,CAAC;KAC7B;IAED,wBAAQ,GAAR,UAAS,MAAoC;QACzC,IAAI,IAAI,CAAC,QAAQ,KAAK,gBAAgB,EAAE;YACpC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,CAAC,GAAA,CAAC,CAAA;SACjD;KACJ;IAED,0BAAU,GAAV,UAAW,IAAU,EAAE,OAAmC;QACtD,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAA;QAElB,IAAM,UAAU,GAA8C;YAC1D,IAAI,EAAE,IAAI;SACb,CAAA;QACD,IAAI,OAAO,IAAI,SAAS,IAAI,OAAO,EAAE;YACjC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;SACvC;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YACtB,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;SACjC;QACD,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,GAAA,CAAC,CAAA;KAC5D;IAED,2BAAW,GAAX,UAAY,IAAU,EAAE,OAAmC;QACvD,IAAM,UAAU,GAA8C;YAC1D,IAAI,EAAE,IAAI;SACb,CAAA;QACD,IAAI,OAAO,IAAI,SAAS,IAAI,OAAO,EAAE;YACjC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;SACvC;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YACtB,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;SACjC;QACD,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,GAAA,CAAC,CAAA;QAE1D,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAA;QAClB,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;YACrB,IAAI,IAAI,CAAC,oBAAoB,EAAE;gBAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAA;gBACvC,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAA;gBACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;aACrB;SACJ;KACJ;IAED,6BAAa,GAAb,UAAc,MAAkB;QAC5B,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,IAAI,EAAE,CAAA;QAC/D,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;KAC3C;IAED,yBAAS,GAAT,UAAU,QAAgB;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;KACrC;IAED,wBAAQ,GAAR,UAAS,MAAc;QACnB,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACrD,IAAI,gBAAgB,EAAE;YAClB,OAAO;SACV;QAED,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;YACzE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;QAC9C,IAAI,eAAe,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,eAAe,CAAC,KAAM,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;SAC7D;QACD,IAAI,eAAe,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,eAAe,CAAC,SAAU,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;SACrE;QACD,IAAI,eAAe,CAAC,YAAY,EAAE;YAC9B,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,eAAe,CAAC,YAAa,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;SAC3E;QACD,IAAI,eAAe,CAAC,aAAa,EAAE;YAC/B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,eAAe,CAAC,aAAc,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;SAC7E;KACJ;IAED,+BAAe,GAAf;QACI,OAAO,IAAI,aAAa,CACpB,IAAI,EACJ,QAAQ,EACR,gBAAgB,EAChB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAClB,IAAI,CAAC,OAAO;;;SAGf,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;KACrB;IAED,yBAAS,GAAT,UAAU,CAAa;QACnB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC5B;IAED,2BAAW,GAAX,UAAY,CAAa;QACrB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAC/B;IAED,uBAAO,GAAP;QAAA,iBAGC;QAFG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAI,CAAC,MAAM,KAAK,IAAI,GAAG,EAAE,KAAK,EAAE,KAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAA,CAAC,CAAA;QAC9F,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAA;KACnC;IAED,sBAAM,GAAN;QACI,MAAM,IAAI,0BAA0B,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;KACxE;IACL,YAAC;AAAD,CAAC,IAAA;AAED,IAAM,UAAU,GAAG,MAAM,CAAC,6BAA6B,CAAC,CAAC;AACzD,IAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AACxC,IAAM,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAEtD,IAAM,gBAAgB,GAAG,eAAqB,CAAC;AAC/C,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAA;AAE1C;IAKI,8BACoB,KAAuB,EACvB,SAA0D;QAD1D,UAAK,GAAL,KAAK,CAAkB;QACvB,cAAS,GAAT,SAAS,CAAiD;;QALvE,qCAAgC,GAAG,UAAU,CAAC;KAMhD;IAEL,qCAAM,GAAN;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;KAC/C;IAED,mCAAI,GAAJ,UAAK,MAAoB;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;KACf;IAED,mCAAI,GAAJ,UAAS,SAAiD;QAA1D,iBAIC;QAHG,OAAO,IAAI,oBAAoB,CAAQ,IAAI,CAAC,KAAK,EAAE,UAAC,CAAC,EAAE,CAAC;YACpD,OAAO,SAAS,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAA;SACpD,CAAC,CAAA;KACL;IAED,sCAAO,GAAP;QACI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;KACvB;IACL,2BAAC;AAAD,CAAC,IAAA;AAID;IAKI,kBAAmB,OAA8C,EAC7D,SAAwC,EACxC,QAAoB,EACpB,aAAyB;QAH7B,iBAsBC;QAtBkB,YAAO,GAAP,OAAO,CAAuC;QAI7D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,GAAG,IAAI,OAAO,CAAmB,UAAA,OAAO;gBAC3C,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;aAC3B,CAAC,CAAA;SACL;QACD,IAAI,CAAC,OAAO,GAAG,OAAO;aACjB,IAAI,CAAC,UAAA,CAAC;YACH,KAAI,CAAC,UAAU,GAAG,IAAI,CAAA;YACtB,IAAI,CAAC,KAAI,CAAC,QAAQ,EAAE;gBAChB,SAAS,CAAC,CAAC,CAAC,CAAA;aACf;SACJ,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACN,KAAI,CAAC,UAAU,GAAG,IAAI,CAAA;YACtB,KAAI,CAAC,KAAK,GAAG,GAAG,CAAA;YAChB,QAAQ,EAAE,CAAA;SACb,CAAC;aACD,IAAI,CAAC,cAAM,OAAA,aAAa,EAAE,GAAA,CAAC,CAAA;KACnC;IACL,eAAC;AAAD,CAAC,IAAA;AAED;IASI,uBACoB,KAAY,EACZ,IAAU,EACnB,YAA0B,EAC1B,WAAc,EACd,YAAoB;QAJX,UAAK,GAAL,KAAK,CAAO;QACZ,SAAI,GAAJ,IAAI,CAAM;QACnB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,gBAAW,GAAX,WAAW,CAAG;QACd,iBAAY,GAAZ,YAAY,CAAQ;KAC1B;IAEL,oCAAY,GAAZ,UAAa,aAAuB;QAChC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAA;YAEtC,IAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;;;;;gBAKtC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAA;gBACvB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAA;aAC3B;iBAAM;;;;gBAIH,IAAI,UAAU,IAAI,IAAI,EAAE;oBACpB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAA;oBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;iBACjB;gBACD,IAAI,WAAW,IAAI,IAAI,EAAE;oBACrB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAA;;oBAExB,IAAI,CAAC,MAAM,CAAA;iBACd;aACJ;SACJ;QACD,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;YAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;gBAClD,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;aACnC;YACD,MAAM,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAA;SAChF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;IAED,2BAAG,GAAH,UAAI,aAAuB;QACvB,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;QACrD,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;YAChC,IAAI,IAAI,CAAC,YAAY,EAAE;gBACnB,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;aACnC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACpC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;aACxD;iBAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,EAAE;gBAClE,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,YAAiC,CAAC,CAAC;aAC9E;iBAAM;gBACH,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;aACnC;SACJ;QACD,OAAO,IAAI,CAAC,UAAU,CAAM,CAAC;KAChC;IAED,sBAAI,gCAAK;aAAT;YACI,OAAO,IAAI,CAAC,GAAG,EAAE,CAAA;SACpB;;;OAAA;IAED,sBAAI,mCAAQ;aAAZ;YACI,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACnC,IAAI,YAAY,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE;gBACjF,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;SAChB;;;OAAA;IAED,sBAAI,gCAAK;aAAT;YACI,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACnC,IAAI,YAAY,KAAK,IAAI,EAAE;gBACvB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE;oBACvD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;iBACpC;gBACD,IAAI,CAAC,GAAG,EAAE,CAAA;aACb;YACD,OAAO,SAAS,CAAC;SACpB;;;OAAA;IAED,oCAAY,GAAZ,UAAa,QAA2B,EAAE,UAAsC;QAC5E,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAChC,QAAQ,GAAI,QAAkC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACvE;QACD,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE;YAC9E,MAAM,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,wBAAwB,CAAC,CAAA;SACpF;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;KAC1D;IAED,2BAAG,GAAH,UAAI,QAA2B;QAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KACpD;IAED,sCAAc,GAAd,UAAe,WAAqC;QAChD,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;QACxC,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;YACnC,WAAW,GAAI,WAAwB,CAAC,YAAY,CAAC,CAAC;SACzD;QAED,IAAI,WAAiB,CAAC;QACtB,IAAI,sBAAsB,GAAG,KAAK,CAAA;QAElC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAC5B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAiB,EAAE,WAAW,CAAC,CAAC,CAAA;aAC5F;iBAAM;gBACH,IAAM,gBAAc,GAAa,EAAE,CAAA;gBACnC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;oBACrC,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,CAAA;oBACvC,IAAI,YAAY,KAAK,IAAI,EAAE;wBACvB,sBAAsB,GAAG,IAAI,CAAA;wBAC7B,gBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;qBAC7B;yBAAM;wBACH,sBAAsB,GAAG,sBAAsB,IAAI,EAAE,KAAK,IAAI,YAAY,CAAC,CAAA;wBAC3E,YAAY,CAAC,KAAK,CAAC,GAAG,YAAY,CAAA;qBACrC;iBACJ,CAAC,CAAC;;;;gBAIH,gBAAc,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;oBAC7B,YAA8B,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBAC/C,CAAC,CAAA;gBACF,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;aAC7D;SACJ;aAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,EAAE;YAClE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAChC,IAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,CAAA;gBACrC,IAAI,YAAY,KAAK,IAAI,EAAE;oBACvB,sBAAsB,GAAG,IAAI,CAAA;oBAC7B,OAAO,YAAY,CAAC,GAAG,CAAC,CAAA;iBAC3B;qBAAM;oBACH,sBAAsB,GAAG,sBAAsB,IAAI,EAAE,GAAG,IAAI,YAAY,CAAC,CAAA;oBACzE,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAA;iBACnC;aACJ,CAAC,CAAA;YACF,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;SAC7D;aAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YACzC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,GAAmB,WAAW,CAAC,CAAC,CAAA;SAChG;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,WAAgB,CAAC,CAAC,CAAA;SAC/C;QAED,IAAI,WAAW,KAAK,IAAI,CAAC,IAAI,IAAI,sBAAsB,EAAE;YACrD,OAAO,CAAC,WAAW,CAAC,CAAA;SACvB;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,WAAW,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;KAC1E;IAED,6BAAK,GAAL,UAAM,WAAqC;QACvC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;KACvD;IAED,6BAAK,GAAL,UAAM,MAAiC,EAAE,OAAsB;QAA/D,iBAmBC;QAlBG,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAM,UAAU,GAAG,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAA;YAC5D,IAAI,UAAU,KAAK,UAAU,EAAE;gBAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,GAAA,CAAC,CAAA;aACrE;YACD,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC1B,OAAO;aACV;YACD,IAAI,UAAU,KAAK,QAAQ,EAAE;gBACzB,IAAI,CAAC,GAAG,EAAE,CAAC;aACd;SACJ;QACD,IAAI;YACA,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;YACzC,MAAM,CAAC,IAAI,CAAC,CAAA;SACf;gBAAS;YACN,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;SAC7C;KACJ;;IAGD,8BAAM,GAAN,UAAO,KAAa;QAChB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KAC3B;IAED,gCAAQ,GAAR,UAAS,KAAa;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KAC3B;IAED,8BAAM,GAAN;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACxB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YACvC,OAAO,KAAkD,CAAC;SAC7D;QACD,OAAO,IAAiD,CAAC;KAC5D;IAID,4BAAI,GAAJ,UAAgB,MAA+B,EAAE,GAAa;QAE1D,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAM,UAAU,GAAG,MAAM,EAAE,CAAC;YAC5B,IAAI,UAAU,CAAC,EAAE,KAAK,YAAY,EAAE;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,OAAO,IAAI,CAAC;aACf;YACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;aAAM;YACH,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,QAAQ,EAAE;gBACV,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aAC3B;YACD,IAAI,GAAG,EAAE;gBACL,OAAO,GAAG,EAAE,CAAC;aAChB;YACD,MAAM,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAA;SAC/F;KACJ;IAED,8BAAM,GAAN;QACI,OAAO,IAAI,CAAC;KACf;IAED,4BAAI,GAAJ,UAAQ,SAA0D;QAC9D,OAAO,IAAI,oBAAoB,CAAO,IAAI,EAAE,SAAS,CAAC,CAAA;KACzD;IAED,+BAAO,GAAP;QACI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;KACvB;IAED,iCAAS,GAAT,UAAU,CAAa;QACnB,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;SAChC;QACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC3B;IAED,mCAAW,GAAX,UAAY,CAAa;QACrB,IAAI,CAAC,WAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAC/B;IAED,6BAAK,GAAL,UAAM,KAAa,EAAE,OAAuB;QACxC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;KACpC;IAEO,oCAAY,GAApB,UAAqB,KAAa,EAAE,OAAuB;QAA3D,iBA+BC;QA9BG,IAAM,MAAM,GAAG;YACX,IAAI,KAAI,CAAC,YAAY;iBAChB,UAAU,IAAI,KAAI,IAAI,WAAW,IAAI,KAAI,CAAC,EAAE;gBAC7C,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;gBAChC,OAAO,IAAI,CAAC;aACf;YACD,KAAiB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;gBAAnB,IAAI,IAAI,cAAA;gBACT,IAAM,aAAa,GAAG,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC7C,IAAI,aAAa,KAAK,SAAS,EAAE;oBAC7B,IAAI,UAAU,IAAI,KAAI,IAAI,WAAW,IAAI,KAAI,EAAE;wBAC3C,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;wBAChC,OAAO,IAAI,CAAC;qBACf;iBACJ;qBAAM;oBACH,IAAM,eAAe,GAAG,KAAI,CAAC,gBAAgB,IAAI,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;oBACtF,IAAI,eAAe,IAAI,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;wBACjE,OAAO,IAAI,CAAC;qBACf;iBACJ;aACJ;YACD,OAAO,KAAK,CAAC;SAChB,CAAA;QAED,IAAM,OAAO,GAAG,MAAM,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAC5C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,CAAC;gBACtB,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;aAC1B,CAAC,CAAA;SACL;QACD,OAAO,OAAO,CAAC;KAClB;IAED,sBAAI,+BAAI;aAAR;YACI,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACxB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACtB,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,GAAA,CAClC,CAAC;aAC/C;YACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAA4C,CAAC;aACxE;YACD,OAAO,SAAyC,CAAC;SACpD;;;OAAA;IAED,6BAAK,GAAL,UAAM,GAAoB;QACtB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC;QACpD,IAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,EAAE;YACV,OAAO,QAAQ,CAAC;SACnB;QACD,IAAM,CAAC,GAAG,IAAI,aAAa,CACvB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAC7B,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EACrB,IAAI,CAAC,YAAY,CACpB,CAAA;QACD,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;SACzB;QACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,OAAO,CAAC,CAAC;KACZ;IAED,sBAAI,iCAAM;aAAV;YACI,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;YACxC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,SAAS,EAAE;gBACjC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;oBAC7B,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;iBAC1D;qBAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,EAAE;oBAClE,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAiC,CAAC,CAAC;iBAChF;qBAAM;oBACH,IAAI,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;iBACjC;aACJ;YACD,OAAO,IAAI,CAAC,WAAW,CAAmC,CAAC;SAC9D;;;OAAA;IAEO,uCAAe,GAAvB,UAAwB,YAAgC;QAAxD,iBAwCC;QAvCG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC;QACpD,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAE/C,IAAM,MAAM,GAAG,UAAC,MAAc,EAAE,GAAgB;YAC5C,IAAI,GAAG,KAAK,QAAQ,EAAE;gBAClB,OAAQ,MAAa,CAAC,MAAM,CAAC;aAChC;YACD,IAAI,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE;gBACxB,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAC/B;YACD,IAAI,GAAG,KAAK,aAAa,EAAE;gBACvB,OAAO,KAAI,CAAC;aACf;YACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,OAAO,SAAS,CAAC;aACpB;YACD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBAC1B,OAAO,SAAS,CAAC;aACpB;YACD,IAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC;aACnB;YACD,IAAM,CAAC,GAAG,IAAI,aAAa,CACvB,KAAI,CAAC,KAAK,EACV,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAC/B,KAAI,CAAC,YAAY,EACjB,MAAM,CAAC,KAAK,CAAC,EACb,KAAI,CAAC,YAAY,CACpB,CAAA;YACD,IAAI,KAAI,CAAC,YAAY,EAAE;gBACnB,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;aACzB;YACD,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,CAAC,CAAC;SACZ,CAAC;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,MAAM,CACG,CAAC;KACjD;IAEO,sCAAc,GAAtB,UAAuB,YAAgC;QAAvD,iBA+BC;QA9BG,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAC9B,UAAC,MAAc,EAAE,GAAgB;YAC7B,IAAI,GAAG,KAAK,QAAQ,EAAE;gBAClB,OAAQ,MAAa,CAAC,MAAM,CAAC;aAChC;YACD,IAAI,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE;gBACxB,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAC/B;YACD,IAAI,GAAG,KAAK,aAAa,EAAE;gBACvB,OAAO,KAAI,CAAC;aACf;YACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;;gBAEzB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;aACtB;YACD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBAC1B,OAAO,SAAS,CAAC;aACpB;YACD,OAAO,CAAC,KAAI,CAAC,MAAM,EAAG,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;SACtC,EACD,UAAC,MAAc,EAAE,GAAgB,EAAE,KAAuB;YACtD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;;gBAEzB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACpB,OAAO,IAAI,CAAC;aACf;YACD,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAA;SAC7E,CACY,CAAC;KACrB;IAEO,wCAAgB,GAAxB,UAAyB,YAAoB;QAA7C,iBA8BC;QA7BG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC;QACpD,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAE/C,IAAM,MAAM,GAAG,UAAC,MAAc,EAAE,GAAgB;YAC5C,IAAI,GAAG,KAAK,aAAa,EAAE;gBACvB,OAAO,KAAI,CAAC;aACf;YACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,OAAO,SAAS,CAAC;aACpB;YACD,IAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC;aACnB;YACD,IAAM,CAAC,GAAG,IAAI,aAAa,CACvB,KAAI,CAAC,KAAK,EACV,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EACxC,KAAI,CAAC,YAAY,EACjB,MAAM,CAAC,GAAG,CAAC,EACX,KAAI,CAAC,YAAY,CACpB,CAAC;YACF,IAAI,KAAI,CAAC,YAAY,EAAE;gBACnB,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;aACzB;YACD,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC1B,OAAO,CAAC,CAAC;SACZ,CAAC;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,MAAM,CACG,CAAC;KACjD;IAEO,uCAAe,GAAvB,UAAwB,YAAoB;QAA5C,iBAqBC;QApBG,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAC9B,UAAC,MAAc,EAAE,GAAgB;YAC7B,IAAI,GAAG,KAAK,aAAa,EAAE;gBACvB,OAAO,KAAI,CAAC;aACf;YACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;;gBAEzB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;aACtB;YACD,OAAO,CAAC,KAAI,CAAC,MAAM,EAAG,GAAG,CAAC,CAAC,KAAK,CAAC;SACpC,EACD,UAAC,MAAc,EAAE,GAAgB,EAAE,KAAuB;YACtD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;;gBAEzB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACpB,OAAO,IAAI,CAAC;aACf;YACD,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAA;SAC7E,CACY,CAAC;KACrB;;IAGO,iCAAS,GAAjB,UAAkB,YAAiB;;IAE/B,MAA8C;;IAE9C,MAA4E;QAJhF,iBAwEC;QAlEG,IAAM,cAAc,GAAG,UAAC,EAAW;YAC/B,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SACtD,CAAA;QACD,OAAO,IAAI,KAAK,CAAC,YAAY,EAAE;YAC3B,cAAc,EAAE,UAAC,MAAM;gBACnB,OAAO,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;aACxC;YACD,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC;gBACtB,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;aACtD;YACD,YAAY,EAAE,UAAC,MAAM;;;;gBAIjB,OAAO,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACtC;YACD,iBAAiB,EAAE,UAAC,MAAM;gBACtB,OAAO,cAAc,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;aACzD;YACD,wBAAwB,EAAE,UAAC,MAAM,EAAE,CAAC;gBAChC,IAAM,MAAM,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,EAAE;oBACzD,OAAO,MAAM,CAAC;iBACjB;gBACD,OAAO,MAAM,IAAI;oBACb,YAAY,EAAE,IAAI;oBAClB,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,GAAG,EAAE,cAAM,OAAA,MAAM,CAAC,MAAgB,EAAE,CAAC,CAAC,GAAA;oBACtC,GAAG,EAAE,SAAS;iBACjB,CAAC;aACL;YACD,GAAG,EAAE,UAAC,MAAM,EAAE,CAAC;gBACX,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;oBACvB,OAAO,KAAK,CAAC;iBAChB;gBACD,OAAO,CAAC,IAAI,MAAM,CAAC;aACtB;YACD,GAAG,EAAE,MAAM;YACX,GAAG,EAAE,MAAM,KAAK,UAAC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ;gBACvC,OAAO,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;aACnD,CAAC;YACF,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC;gBACtB,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;aACtD;YACD,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC,EAAE,UAAU;gBAClC,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;aACtD;YACD,SAAS,EAAE,UAAC,MAAM;gBACd,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACvB,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC/C;gBACD,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC9B;YACD,OAAO,EAAE,UAAC,MAAM;gBACZ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACvB,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC/C;gBACD,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC9B;YACD,KAAK,EAAE,UAAC,MAAM,EAAE,OAAO,EAAE,QAAS;gBAC9B,OAAO,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;aAC7C;YACD,SAAS,EAAE,UAAC,MAAM,EAAE,QAAQ,EAAE,SAAU;gBACpC,OAAO,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;aACjD;SACJ,CAAC,CAAC;KACN;IAED,sBAAI,6BAAM;aAAV;YAAA,iBAyEC;YAxEG,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,EACtB,IAAI,CAAC,WAAW,EAChB;gBACI,KAAI,CAAC,GAAG,EAAE,CAAA;gBACV,OAAO,KAAI,CAAC,WAAW,CAAA;aAC1B,EACL,UAAC,CAAC,EAAE,GAAG;gBACH,IAAI,GAAG,KAAK,aAAa,EAAE;;;oBAGvB,OAAO,KAAI,CAAC;iBACf;gBACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;oBACzB,IAAI,GAAG,KAAK,IAAI,EAAE;wBACd,OAAO,KAAI,CAAA;qBACd;yBAAM;wBACH,OAAO,SAAS,CAAA;qBACnB;iBACJ;qBAAM;oBACH,IAAI,GAAG,KAAK,QAAQ,EAAE;wBAClB,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;qBACzE;oBAED,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBAC7C;oBACI,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI;;wBAE1D,YAAY,KAAK,IAAI,EAAE;wBACvB,QAAQ,GAAG;4BACP,KAAK,MAAM;gCACP,OAAO,KAAI,CAAC,IAAI,CAAA;4BACpB,KAAK,MAAM;gCACP,OAAO,KAAI,CAAC,IAAI,CAAA;4BACpB,KAAK,OAAO;gCACR,OAAO,KAAI,CAAC,KAAK,CAAA;4BACrB,KAAK,KAAK;gCACN,OAAO,cAAM,OAAA,KAAI,CAAC,GAAG,EAAE,GAAA,CAAA;4BAC3B,KAAK,KAAK;gCACN,OAAO,UAAC,CAAoB,IAAK,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAA,CAAA;4BAChD,KAAK,OAAO;gCACR,OAAO,UAAC,CAA2B,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAA,CAAA;4BACzD,KAAK,KAAK;;gCAEN,OAAO;oCAAC,cAAc;yCAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;wCAAd,yBAAc;;oCAAK,OAAA,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;iCAAA,CAAA;4BAC3E,KAAK,QAAQ;gCACT,OAAO,UAAC,CAAS,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAA,CAAA;4BACxC;gCACI,KAAI,CAAC,GAAG,EAAE,CAAA;gCACV,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,OAAO,CAAC,6BAA6B,CAAC,CAAA;yBAC7F;qBACJ;oBAED,KAAI,CAAC,GAAG,EAAE,CAAA;oBACV,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;wBAC7B,IAAI,GAAG,KAAK,QAAQ,EAAE;4BAClB,OAAO,YAAY,CAAC,MAAM,CAAC;yBAC9B;wBACD,IAAI,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE;4BACxB,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;yBAC/B;wBACD,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;4BAC1B,OAAO,SAAS,CAAC;yBACpB;wBACD,OAAO,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAA;qBACjC;oBACD,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAA;iBAC1C;aACJ,EACD,UAAC,CAAC,EAAE,GAAG,EAAE,KAAK;gBACV,MAAM,IAAI,0BAA0B,CAAC,KAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAA;aAC7E,CAAwB,CAAC;SAC7B;;;OAAA;IAkBD,2BAAG,GAAH,UACI,MAA2B,EAC3B,UAAyD,EACzD,OAA2E,EAC3E,OAA8B;QAJlC,iBAmDC;QA7CG,IAAI,CAAC,MAAM,EAAE;YACT,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;aACtC;YACD,IAAI,IAAI,CAAC,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;aACxC;YACD,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;SACxC;QAED,IAAM,UAAU,GAAG,OAAO,UAAU,KAAK,UAAU;eAC5C,OAAO,OAAO,KAAK,UAAU,GAAG,OAAO,GAAG,OAAO;cAClD,UAAU,CAAC;QAEjB,IAAM,QAAQ,IAAI,UAAC,SAA8B;YAC7C,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC1B,IAAM,IAAI,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAA;gBACpC,IAAI;oBACA,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;oBACtC,OAAO,SAAS,EAAE,CAAA;iBACrB;wBAAS;oBACN,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;iBAC1C;aACJ;iBAAM;gBACH,OAAO,SAAS,EAAE,CAAA;aACrB;SACJ,CAAC,CAAA;QAEF,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnD,OAAO,QAAQ,CAAC;gBACZ,IAAM,CAAC,GAAI,UAAoC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAA;gBAC3D,IAAI,CAAsB,KAAK,QAAQ,EAAE;;oBAErC,KAAI,CAAC,KAAK,CAAC,aAAa,CACpB,cAAM,OAAA,KAAI,CAAC,GAAG,CAAC,MAAM,EAAE,UAAiB,EAAE,OAAc,EAAE,OAAc,CAAC,GAAA,CAAC,CAAA;iBACjF;gBACD,OAAO,CAAC,CAAC;aACZ,CAAC,CAAA;SACL;QAED,IAAI,OAAO,OAAO,KAAK,UAAU,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7C,OAAO,QAAQ,CAAC,cAAM,OAAC,OAAsD,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,GAAA,CAAC,CAAA;SACzG;QAED,OAAO,QAAQ,CAAC,cAAM,OAAA,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,GAAA,CAAC,CAAA;KAC5C;IAED,sBAAI,iCAAM;aAAV;YACI,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YACxB,IAAI,CAAC,EAAE;gBACH,OAAO,CAAC,CAAC,IAAI,CAA+B,CAAC;aAChD;YACD,OAAO,CAA0C,CAAC;SACrD;;;OAAA;IAID,8BAAM,GAAN,UAAO,CAA0B;QAE7B,IAAI,OAAO,CAAC,KAAK,UAAU,EAAE;YACzB,IAAM,UAAU,GAAG,CAAC,EAAE,CAAC;YACvB,IAAI,UAAU,CAAC,EAAE,KAAK,YAAY,EAAE;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;YACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;aAAM;YACH,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzC,IAAM,cAAY,GAAG,IAAI,CAAC;YAC1B,OAAO,CAAC,QAAQ,KAAK,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;;;gBAGnG;oBACI,YAAY;wBACR,OAAO,cAAY,CAAC,YAAY,EAAE,CAAA;qBACrC;oBACD,YAAY,EAAZ,UAAa,CAAC;wBACV,OAAO,CAAC,cAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;qBACxC;oBACD,cAAc,EAAd,UAAe,CAAC;wBACZ,OAAO,cAAY,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;qBACxC;oBACD,QAAQ,YAAC,KAAK;wBACV,OAAO,cAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACvC;iBACJ;aACJ,CAAC;SACL;KACJ;IACL,oBAAC;AAAD,CAAC,IAAA;AAED,SAAS,SAAS,CACd,IAAU;AACV;AACA,eAAoB;AACpB;AACA,YAAuB;AACvB;AACA,cAAsD;AACtD;AACA,cAAmF;IAEnF,IAAM,cAAc,GAAG,UAAC,EAAW;QAC/B,MAAM,IAAI,0BAA0B,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;KACjD,CAAA;IACD,IAAI,OAAO,eAAe,KAAK,QAAQ,IAAI,eAAe,KAAK,IAAI,EAAE;QACjE,eAAe,GAAG,EAAE,CAAA;KACvB;IACD,OAAO,IAAI,KAAK,CAAC,eAAe,EAAE;QAC9B,cAAc,EAAE,UAAC,MAAM;;;YAGnB,IAAM,UAAU,GAAG,YAAY,EAAE,CAAA;YACjC,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;gBACjD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;SAC5C;QACD,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC;YACtB,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;SACtD;QACD,YAAY,EAAE,UAAC,MAAM;;;YAGjB,OAAO,IAAI,CAAC;;SAEf;QACD,iBAAiB,EAAE,UAAC,MAAM;YACtB,OAAO,cAAc,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAA;SACzD;QACD,wBAAwB,EAAE,UAAC,MAAM,EAAE,CAAC;YAChC,IAAM,UAAU,GAAG,YAAY,EAAE,CAAA;YACjC,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;gBACjD,OAAO,SAAS,CAAC;aACpB;YACD,IAAM,MAAM,GAAG,MAAM,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAC9D,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,EAAE;gBAC7D,OAAO,MAAM,CAAC;aACjB;YACD,OAAO,MAAM,IAAI;gBACb,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,GAAG,EAAE,cAAM,OAAA,cAAc,CAAC,SAAS,EAAE,CAAC,CAAC,GAAA;gBACvC,GAAG,EAAE,SAAS;aACjB,CAAC;SACL;QACD,GAAG,EAAE,UAAC,MAAM,EAAE,CAAC;YACX,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;gBACvB,OAAO,KAAK,CAAC;aAChB;YACD,IAAM,UAAU,GAAG,YAAY,EAAE,CAAA;YACjC,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,IAAI,EAAE;gBACvD,OAAO,CAAC,IAAI,UAAU,CAAC;aAC1B;YACD,OAAO,KAAK,CAAC;SAChB;QACD,GAAG,EAAE,cAAc;QACnB,GAAG,EAAE,cAAc;QACnB,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC;YACtB,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;SACtD;QACD,cAAc,EAAE,UAAC,MAAM,EAAE,CAAC,EAAE,UAAU;YAClC,OAAO,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;SACtD;QACD,SAAS,EAAE,UAAC,MAAM;YACd,IAAM,UAAU,GAAG,YAAY,EAAE,CAAA;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aACnD;YACD,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;gBACjD,OAAO,EAAE,CAAC;aACb;YACD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAClC;QACD,OAAO,EAAE,UAAC,MAAM;YACZ,IAAM,UAAU,GAAG,YAAY,EAAE,CAAA;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aACnD;YACD,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;gBACjD,OAAO,EAAE,CAAC;aACb;YACD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAClC;QACD,KAAK,EAAE,UAAC,MAAM,EAAE,OAAO,EAAE,QAAS;YAC9B,OAAO,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;SAC7C;QACD,SAAS,EAAE,UAAC,MAAM,EAAE,QAAQ,EAAE,SAAU;YACpC,OAAO,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;SACjD;KACJ,CAAC,CAAC;AACP,CAAC;AAED,SAAS,WAAW,CAAI,OAAiC;IACrD,IAAI,YAAY,GAAmB,OAA2B,CAAC;IAC/D,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;QAC/B,YAAY,GAAI,OAAkC,EAAE,CAAC;KACxD;IACD,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;QAC1F,MAAM,IAAI,0BAA0B,CAAC,QAAQ,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAA;KACpF;IACD,OAAO,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;AACnC,CAAC;AAED,SAAS,sBAAsB,CAC3B,KAAY,EACZ,IAAU,EACV,MAAkB,EAClB,eAA6B,EAC7B,gBAAqC;IAErC,IAAM,IAAI,GAAG,IAAI,aAAa,CAC1B,KAAK,EACL,IAAI,EACJ,MAAM,EACN,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EACf,KAAK,CAAC,OAAO,CAChB,CAAC;IACF,IAAI,gBAAgB,EAAE;QAClB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;KACxB;IACD,KAAK,CAAC,SAAS,CAAC;QACZ,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,OAAO;YACH,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAA;YAC3C,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACrC,CAAA;KACJ,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAS,eAAe,CACpB,IAAsB,EACtB,SAA0D;IAE1D,IAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;;QAEtC,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACrC;IACD,IAAI,oBAAoB,GAA6B,SAAS,CAAC;IAC/D,IAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC;IAC7C,IAAI,CAAC,YAAY,GAAG;QAChB,IAAI,oBAAoB,EAAE;YACtB,OAAO,oBAAoB,EAAE,CAAC;SACjC;QACD,OAAO,kBAAkB,EAAE,CAAC;KAC/B,CAAA;IAED,IAAM,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC1C,IAAM,eAAe,GAA0C,IAAI,CAAC,WAAW,CAAC,CAAC;IACjF,IAAI,eAAe,KAAK,SAAS,EAAE;QAC/B,OAAO,MAAM,CAAC;KACjB;IACD,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzB,oBAAoB,GAAG;QACnB,IAAM,aAAa,GAAG,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;;QAG9C,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE;YACzC,kBAAkB,EAAE,CAAC;SACxB;KACJ,CAAA;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAkCD;;;;;;SAMgB,qBAAqB,CACjC,MAAgE,EAChE,SAAsC;IAEtC,IAAI,MAAM,YAAY,oBAAoB,EAAE;QACxC,OAAO,MAAM,CAAC,MAAM,EAAE,CAAA;KACzB;IACD,IAAI,SAAS,EAAE;QACX,OAAO,SAAS,CAAC,MAAiC,CAAC,CAAA;KACtD;IACD,OAAO,MAAiC,CAAC;AAC7C,CAAC;AAgHD;;;;;;IAMa,IAAI,GAAG;;;;;;;;;;;;;;;;;;"}