{"version":3,"sources":["examples/getting-started.tsx","App.tsx","examples/getting-started-local.tsx","serviceWorker.ts","index.tsx"],"names":["store","createStateLink","counter","setInterval","useStateLinkUnmounted","nested","set","p","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","button","margin","ButtonAppBar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","window","open","SourceCodeView","props","code","useAsync","Promise","resolve","reject","request","get","url","err","resp","body","codeString","loading","concat","error","toString","value","console","log","undefined","default_highlight","language","style","ExampleIds","ExamplesRepo","Map","name","description","Fragment","demo","state","useStateLink","dist","href","priority","taskName","onChange","v","target","HomePage","_React$useState","React","useState","_React$useState2","Object","slicedToArray","tab","setTab","exampleId","example","has","exampleMeta","Box","padding","gutterBottom","align","Container","maxWidth","paddingTop","display","justifyContent","location","key","Paper","square","FormControl","fullWidth","InputLabel","htmlFor","Select","navigate","input","OutlinedInput","labelWidth","id","inputProps","Array","from","entries","map","_ref","_ref2","k","MenuItem","Tabs","centered","indicatorColor","textColor","event","newValue","aria-label","Tab","label","backgroundColor","App_SourceCodeView","routes","/:example","_ref3","App_HomePage","App","routeResult","useRoutes","CssBaseline","App_ButtonAppBar","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db5de82d.chunk.js","sourcesContent":["import React from 'react';\nimport { createStateLink, useStateLink, useStateLinkUnmounted } from '@hookstate/core';\n\nconst store = createStateLink({ counter: 0 });\n\nsetInterval(() => useStateLinkUnmounted(store).nested.counter.set(p => p + 1), 3000)\n\nexport const ExampleComponent = () => {\n    const state = useStateLink(store);\n    return <p>\n        <span><b>Counter value: {state.value.counter}</b> (watch +1 every 3 seconds) </span>\n        <button onClick={() => state.nested.counter.set(p => p + 1)}>Increment</button>\n    </p>\n}\n","import React from 'react'\n\nimport { CssBaseline, Theme, createStyles, makeStyles, AppBar, Toolbar, IconButton, Typography, Button, Box, Grid, Container, FormControl, InputLabel, Select, MenuItem, OutlinedInput, Paper, Tabs, Tab, ButtonGroup } from '@material-ui/core';\nimport { navigate, useRoutes, HookRouter, A } from 'hookrouter';\n\n// import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter/prism-light';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nimport { useAsync } from 'react-use';\nimport request from 'request';\nimport { ExampleComponent as Example1 } from './examples/getting-started';\nimport { ExampleComponent as Example2 } from './examples/getting-started-local';\n\n// import { prismStyle } from './highlightStyles';\nconst highlightStyle = undefined;\n// declare var highlightStyle: any;\n// const highlightStyle = require('react-syntax-highlighter/dist/esm/styles/prism/tomorrow').default;\n// import { default as highlightStyle } from require('react-syntax-highlighter/dist/esm/styles/prism/duotone-light');\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\nconst ButtonAppBar = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        @hookstate\n                    </Typography>\n                    <Button\n                        color=\"inherit\"\n                        variant=\"outlined\"\n                        onClick={() => {\n                            window.open('https://github.com/avkonst/hookstate', '_blank')\n                        }}\n                    >\n                        Fork me on Github\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nconst SourceCodeView = (props: { url: string }) => {\n    const code = useAsync(() => new Promise<string>((resolve, reject) => {\n        request.get(\n            props.url,\n            (err, resp, body) => err ? reject(err) : resolve(body));\n        }\n    ))\n\n    let codeString = ''\n    if (code.loading) {\n        codeString = `Loading code sample from: ${props.url}`;\n    } else if (code.error) {\n        codeString = `Failure to load code sample from: ${props.url} (${code.error.toString()})`;\n    } else {\n        codeString = code.value ? code.value.toString() : `Failure to load code sample from: ${props.url}`;\n    }\n\n    console.log(highlightStyle);\n\n    return (\n        <SyntaxHighlighter\n\n            language=\"typescript\" style={highlightStyle}>\n            {codeString}\n        </SyntaxHighlighter>\n    );\n};\n\ninterface ExampleMeta {\n    name: string,\n    description: JSX.Element,\n    code: string,\n    demo: JSX.Element;\n}\n\nconst ExampleIds = {\n    GettingStartedGlobal: 'getting-started',\n    GettingStartedLocal: 'getting-started-local'\n}\n\nconst ExamplesRepo: Map<string, ExampleMeta> = new Map();\nExamplesRepo.set(ExampleIds.GettingStartedGlobal, {\n    name: '1. Getting Started: Global Application State',\n    description: <>Basic example shows how to create a global data store and\n        access it within and outside of a React component.\n        Only few lines of code: create state and use it. That is it.\n        In contrast with Redux and Mobx, it is so much less boilerplate code (if any), isn't it?</>,\n    code: 'https://raw.githubusercontent.com/avkonst/hookstate/master/examples/src/examples/getting-started.tsx',\n    demo: <Example1 />\n});\nExamplesRepo.set(ExampleIds.GettingStartedLocal, {\n    name: '2. Getting Started: Local Component State, eg. Form State',\n    description: <>Local component state can be managed in the same way as the global state.\n        The difference with the <A href={ExampleIds.GettingStartedGlobal}>global state example</A> is\n        that the state is automatically created by <code>useStateLink</code> and\n        saved per component but not globaly.\n        The local state is not preserved when a component is unmounted.\n        It is very similar to the original <code>React.useState</code> functionaly,\n        but has got more features. One of the features is the <code>nested</code> property,\n        which allows to traverse the data in the consistent way and mutate nested properties easier.\n        </>,\n    code: 'https://raw.githubusercontent.com/avkonst/hookstate/master/examples/src/examples/getting-started-local.tsx',\n    demo: <Example2 />\n});\n\nconst HomePage = (props: { example?: string }) => {\n    const [tab, setTab] = React.useState(2);\n    const classes = useStyles();\n    const exampleId = props.example && ExamplesRepo.has(props.example)\n        ? props.example : ExampleIds.GettingStartedGlobal;\n    const exampleMeta = ExamplesRepo.get(exampleId)!;\n\n    function handleChange(event: React.ChangeEvent<{}>, newValue: number) {\n        setTab(newValue);\n    }\n\n    return <Box padding={4}>\n        <Typography variant=\"h2\" gutterBottom={true} align=\"center\">\n            @hookstate\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom={true} align=\"center\">\n            Modern and high-performance state management for React done in type-safe and plugin extendable way.\n        </Typography>\n        <Container maxWidth=\"md\">\n            <Box\n                paddingTop={2}\n                display=\"flex\"\n                justifyContent=\"center\"\n            >\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        onClick={() => {\n                            window.location.href = 'https://github.com/avkonst/hookstate#whyhookstate'\n                        }}\n                    >Why hookstate\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        onClick={() => {\n                            window.location.href = 'https://github.com/avkonst/hookstate#apidocumentation'\n                        }}\n                    >See documentation\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        onClick={() => {\n                            window.location.href = 'https://github.com/avkonst/hookstate#plugins'\n                        }}\n                    >Browse plugins\n                    </Button>\n            </Box>\n        </Container>\n        <Container maxWidth=\"md\" key={exampleId}>\n            <Box paddingTop={2}>\n                <Paper square>\n                    <Box padding={2} paddingTop={4}>\n                        <FormControl fullWidth={true} variant=\"outlined\">\n                            <InputLabel htmlFor=\"example-simple\">Selected example:</InputLabel>\n                            <Select\n                                value={exampleId}\n                                onChange={(v) => navigate(v.target.value as string)}\n                                input={<OutlinedInput labelWidth={160} name=\"example\" id=\"example-simple\" />}\n                                inputProps={{\n                                    name: 'example',\n                                    id: 'example-simple',\n                                }}\n                            >\n                                {\n                                    Array.from(ExamplesRepo.entries())\n                                        .map(([k, v]) => <MenuItem key={k} value={k}>{v.name}</MenuItem>)\n                                }\n                            </Select>\n                        </FormControl>\n                    </Box>\n                    <Tabs\n                        centered={true}\n                        value={tab}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        onChange={handleChange}\n                        aria-label=\"disabled tabs example\"\n                    >\n                        <Tab label=\"View code\" />\n                        <Tab label=\"View demo\" />\n                        <Tab label=\"View both\" />\n                    </Tabs>\n                    {exampleMeta.description &&\n                        <Box\n                            margin={2}\n                            padding={2}\n                            style={{\n                                backgroundColor: 'rgba(0, 0, 200, 0.05)',\n                            }}\n                        >\n                            <Typography variant=\"body1\" align=\"left\" >\n                                {exampleMeta.description}\n                            </Typography>\n                        </Box>\n                    }\n                    {(tab === 1 || tab === 2) &&\n                        <Box\n                            margin={2}\n                            padding={2}\n                            style={{\n                                backgroundColor: 'rgba(0, 200, 0, 0.05)',\n                            }}\n                        >\n                            {exampleMeta.demo}\n                        </Box>\n                    }\n                    {(tab === 0 || tab === 2) &&\n                        <Box margin={2}>\n                            <SourceCodeView url={exampleMeta.code} />\n                        </Box>\n                    }\n                    <Box\n                        paddingTop={2}\n                    />\n                </Paper>\n            </Box>\n        </Container>\n    </Box>\n}\n\nconst routes: HookRouter.RouteObject = {\n    '/:example': ({ example }: HookRouter.QueryParams) => <HomePage example={example} />,\n};\n\nexport const App = () => {\n    const routeResult = useRoutes(routes);\n\n    return <>\n        <CssBaseline />\n        <ButtonAppBar />\n        {routeResult || <HomePage />}\n    </>;\n}\n\nexport default App;\n","import React from 'react';\nimport { useStateLink } from '@hookstate/core';\n\nexport const ExampleComponent = () => {\n    const state = useStateLink({ priority: 0, taskName: 'Untitled Task' });\n    return <>\n        <p>\n            <span><b>Counter value: {state.value.priority}</b> </span>\n            <button onClick={() => state.nested.priority.set(p => p + 1)}>Increase priority</button>\n        </p>\n        <p>\n            <span><b>Task name: {state.value.taskName}</b> </span>\n            <input value={state.value.taskName} onChange={v => state.nested.taskName.set(v.target.value)}/>\n        </p>\n    </>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}