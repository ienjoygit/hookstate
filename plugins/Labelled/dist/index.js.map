{"version":3,"file":"index.js","sources":["../src/Labelled.ts"],"sourcesContent":["import { StateLink, Plugin, StateValueAtPath, PluginCallbacks, State, StateMarkerID, self, StateMethods } from '@hookstate/core';\n\nconst LabelledID = Symbol('Labelled');\n\n/**\n * A plugin which allows to assign a label to a state.\n * It can be used by other extensions, like development tools or\n * plugins persisting a state.\n *\n * For example:\n *\n * ```tsx\n * const globalState = createStateLink(someLargeObject as object,\n *     [Labelled('my-state-label')]) // label the state very early\n * const MyComponent = () => {\n *     const state = useStateLink(globalState)\n *     console.log('state label', Labelled(state))\n *     return <>{JSON.stringify(state.value)}</>\n * }\n * ```\n */\nexport function Labelled(label: string): () => Plugin;\n/**\n * A plugin which allows to assign a label to a state.\n * It can be used by other extensions, like development tools or\n * plugins persisting a state.\n *\n * For example:\n *\n * ```tsx\n * const MyComponent = () => {\n *     const state = useStateLink(globalState, [Labelled('my-state-label')])\n *     console.log('state label', Labelled(state))\n *     return <>{JSON.stringify(state.value)}</>\n * }\n * ```\n */\nexport function Labelled<S>(link: StateLink<S>): string | undefined;\nexport function Labelled<S>(link: State<S>): string | undefined;\nexport function Labelled<S>(labelOrLink: string | StateLink<S> | State<S>):\n    (() => Plugin) | string | undefined {\n        \n    if (typeof labelOrLink === 'string') {\n        const label = labelOrLink;\n        return () => ({\n            id: LabelledID,\n            init: () => {\n                return ({\n                    label: label\n                } as PluginCallbacks);\n            }\n        })\n    }\n    if (labelOrLink[StateMarkerID]) {\n        const th = labelOrLink as State<S>;\n        const [plugin] = th[self].attach(LabelledID);\n        if (plugin instanceof Error) {\n            return undefined;\n        }\n        return (plugin as { label: string }).label;\n    } else {\n        const th = labelOrLink as StateLink<S>;\n        const plugin = th.with(LabelledID, () => undefined);\n        return plugin && (plugin[1] as { label: string }).label;\n    }\n}"],"names":["StateMarkerID","self"],"mappings":";;;;;;AAEA,IAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;SAqCtB,QAAQ,CAAI,WAA6C;IAGrE,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACjC,IAAM,OAAK,GAAG,WAAW,CAAC;QAC1B,OAAO,cAAM,QAAC;YACV,EAAE,EAAE,UAAU;YACd,IAAI,EAAE;gBACF,OAAQ;oBACJ,KAAK,EAAE,OAAK;iBACK,CAAC;aACzB;SACJ,IAAC,CAAA;KACL;IACD,IAAI,WAAW,CAACA,kBAAa,CAAC,EAAE;QAC5B,IAAM,EAAE,GAAG,WAAuB,CAAC;QAC5B,IAAA,MAAM,GAAI,EAAE,CAACC,SAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAA/B,CAAgC;QAC7C,IAAI,MAAM,YAAY,KAAK,EAAE;YACzB,OAAO,SAAS,CAAC;SACpB;QACD,OAAQ,MAA4B,CAAC,KAAK,CAAC;KAC9C;SAAM;QACH,IAAM,EAAE,GAAG,WAA2B,CAAC;QACvC,IAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,cAAM,OAAA,SAAS,GAAA,CAAC,CAAC;QACpD,OAAO,MAAM,IAAK,MAAM,CAAC,CAAC,CAAuB,CAAC,KAAK,CAAC;KAC3D;AACL;;;;"}