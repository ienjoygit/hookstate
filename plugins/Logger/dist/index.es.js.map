{"version":3,"file":"index.es.js","sources":["../src/Logger.ts"],"sourcesContent":["\nimport {\n    DisabledTracking,\n    Plugin,\n    Path,\n    StateValueAtRoot,\n    StateValueAtPath,\n    PluginInstance,\n    StateLink\n} from '@hookstate/core';\n\nexport interface LoggerExtensions {\n    log(): void;\n}\n\nclass LoggerPluginInstance implements PluginInstance {\n    toJsonTrimmed(s: StateValueAtPath) {\n        const limit = 100;\n        const r = JSON.stringify(s);\n        if (r.length > 100) {\n            return `${r.slice(0, limit)}... (${r.length - limit} characters trunkated)`\n        }\n        return r;\n    }\n\n    getAtPath(v: StateValueAtRoot, path: Path) {\n        let result = v;\n        path.forEach(p => {\n            result = result[p];\n        });\n        return result;\n    }\n\n    onInit() {\n        // tslint:disable-next-line: no-console\n        console.log(`[hookstate]: logger attached`);\n    }\n    onSet(p: Path, v: StateValueAtRoot) {\n        const newValue = this.getAtPath(v, p);\n        // tslint:disable-next-line: no-console\n        console.log(\n            `[hookstate]: new value set at path '/${p.join('/')}': ` +\n            `${this.toJsonTrimmed(newValue)}`,\n            {\n                path: p,\n                value: newValue\n            });\n    }\n\n    log(l: StateValueAtPath) {\n        l.with(DisabledTracking); // everything is touched by the JSON, so no point to track\n        // tslint:disable-next-line: no-console\n        return console.log(\n            `[hookstate]: current value at path '/${l.path.join('/')}: ` +\n            `${this.toJsonTrimmed(l.value)}'`,\n            {\n                path: l.path,\n                value: l.value\n            });\n    }\n}\n\nconst PluginID = Symbol('Logger');\n\n// tslint:disable-next-line: function-name\nexport function Logger(): Plugin;\nexport function Logger<S>(self: StateLink<S>): LoggerExtensions;\nexport function Logger<S>(self?: StateLink<S>): Plugin | LoggerExtensions {\n    if (self) {\n        const [link, instance] = self.with(PluginID);\n        const inst = instance as LoggerPluginInstance;\n        return {\n            log: () => inst.log(link)\n        }\n    }\n    return {\n        id: PluginID,\n        instanceFactory: () => {\n            return new LoggerPluginInstance();\n        }\n    }\n}\n"],"names":[],"mappings":";;AAeA;IAAA;KA6CC;IA5CG,4CAAa,GAAb,UAAc,CAAmB;QAC7B,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,CAAC,MAAM,GAAG,GAAG,EAAE;YAChB,OAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,cAAQ,CAAC,CAAC,MAAM,GAAG,KAAK,4BAAwB,CAAA;SAC9E;QACD,OAAO,CAAC,CAAC;KACZ;IAED,wCAAS,GAAT,UAAU,CAAmB,EAAE,IAAU;QACrC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;YACV,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAED,qCAAM,GAAN;;QAEI,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;KAC/C;IACD,oCAAK,GAAL,UAAM,CAAO,EAAE,CAAmB;QAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEtC,OAAO,CAAC,GAAG,CACP,0CAAwC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAK;aACxD,KAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAG,CAAA,EACjC;YACI,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,QAAQ;SAClB,CAAC,CAAC;KACV;IAED,kCAAG,GAAH,UAAI,CAAmB;QACnB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;;QAEzB,OAAO,OAAO,CAAC,GAAG,CACd,0CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI;aACzD,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,MAAG,CAAA,EACjC;YACI,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,KAAK,EAAE,CAAC,CAAC,KAAK;SACjB,CAAC,CAAC;KACV;IACL,2BAAC;CAAA,IAAA;AAED,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAKlC,SAAgB,MAAM,CAAI,IAAmB;IACzC,IAAI,IAAI,EAAE;QACA,IAAA,wBAAsC,EAArC,cAAI,EAAE,gBAA+B,CAAC;QAC7C,IAAM,MAAI,GAAG,QAAgC,CAAC;QAC9C,OAAO;YACH,GAAG,EAAE,cAAM,OAAA,MAAI,CAAC,GAAG,CAAC,MAAI,CAAC,GAAA;SAC5B,CAAA;KACJ;IACD,OAAO;QACH,EAAE,EAAE,QAAQ;QACZ,eAAe,EAAE;YACb,OAAO,IAAI,oBAAoB,EAAE,CAAC;SACrC;KACJ,CAAA;CACJ;;;;"}