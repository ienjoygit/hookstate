{"version":3,"file":"index.es.js","sources":["../src/Logger.ts"],"sourcesContent":["\nimport { DisabledTracking, Plugin, PluginTypeMarker, Path, StateValueAtRoot, StateValueAtPath } from 'react-hookstate';\n\nexport interface LoggerExtensions {\n    log(): void;\n}\n\nconst PluginID = Symbol('Logger');\n\n// tslint:disable-next-line: function-name\nexport function Logger<S, E extends {}>(unused: PluginTypeMarker<S, E>): Plugin<E, LoggerExtensions> {\n    const toJsonTrimmed = (s: StateValueAtPath) => {\n        const limit = 100;\n        const r = JSON.stringify(s);\n        if (r.length > 100) {\n            return `${r.slice(0, limit)}... (${r.length - limit} characters trunkated)`\n        }\n        return r;\n    }\n    return {\n        id: PluginID,\n        instanceFactory: () => {\n            const getAtPath = (v: StateValueAtRoot, path: Path) => {\n                let result = v;\n                path.forEach(p => {\n                    result = result[p];\n                });\n                return result;\n            }\n            return {\n                onInit: () => {\n                    // tslint:disable-next-line: no-console\n                    console.log(`[hookstate]: logger attached`);\n                },\n                onSet: (p, v) => {\n                    const newValue = getAtPath(v, p);\n                    // tslint:disable-next-line: no-console\n                    console.log(\n                        `[hookstate]: new value set at path '/${p.join('/')}': ` +\n                        `${toJsonTrimmed(newValue)}`,\n                        {\n                            path: p,\n                            value: newValue\n                        });\n                },\n                extensions: ['log'],\n                extensionsFactory: (l) => ({\n                    log() {\n                        l.with(DisabledTracking); // everything is touched by the JSON, so no point to track\n                        // tslint:disable-next-line: no-console\n                        return console.log(\n                            `[hookstate]: current value at path '/${l.path.join('/')}: ` +\n                            `${toJsonTrimmed(l.value)}'`,\n                            {\n                                path: l.path,\n                                value: l.value\n                            });\n                    }\n                })\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;AAOA,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAGlC,SAAgB,MAAM,CAAkB,MAA8B;IAClE,IAAM,aAAa,GAAG,UAAC,CAAmB;QACtC,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,CAAC,MAAM,GAAG,GAAG,EAAE;YAChB,OAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,cAAQ,CAAC,CAAC,MAAM,GAAG,KAAK,4BAAwB,CAAA;SAC9E;QACD,OAAO,CAAC,CAAC;KACZ,CAAA;IACD,OAAO;QACH,EAAE,EAAE,QAAQ;QACZ,eAAe,EAAE;YACb,IAAM,SAAS,GAAG,UAAC,CAAmB,EAAE,IAAU;gBAC9C,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;oBACV,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;iBACtB,CAAC,CAAC;gBACH,OAAO,MAAM,CAAC;aACjB,CAAA;YACD,OAAO;gBACH,MAAM,EAAE;;oBAEJ,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;iBAC/C;gBACD,KAAK,EAAE,UAAC,CAAC,EAAE,CAAC;oBACR,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;oBAEjC,OAAO,CAAC,GAAG,CACP,0CAAwC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAK;yBACxD,KAAG,aAAa,CAAC,QAAQ,CAAG,CAAA,EAC5B;wBACI,IAAI,EAAE,CAAC;wBACP,KAAK,EAAE,QAAQ;qBAClB,CAAC,CAAC;iBACV;gBACD,UAAU,EAAE,CAAC,KAAK,CAAC;gBACnB,iBAAiB,EAAE,UAAC,CAAC,IAAK,QAAC;oBACvB,GAAG;wBACC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;;wBAEzB,OAAO,OAAO,CAAC,GAAG,CACd,0CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI;6BACzD,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,MAAG,CAAA,EAC5B;4BACI,IAAI,EAAE,CAAC,CAAC,IAAI;4BACZ,KAAK,EAAE,CAAC,CAAC,KAAK;yBACjB,CAAC,CAAC;qBACV;iBACJ,IAAC;aACL,CAAA;SACJ;KACJ,CAAA;CACJ;;;;"}