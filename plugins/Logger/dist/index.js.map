{"version":3,"file":"index.js","sources":["../src/Logger.ts"],"sourcesContent":["\nimport {\n    Plugin,\n    Path,\n    StateValueAtPath,\n    PluginCallbacks,\n    PluginCallbacksOnSetArgument,\n    State,\n    self,\n    PluginStateControl\n} from '@hookstate/core';\n\nexport interface LoggerExtensions {\n    log(): void;\n}\n\nclass LoggerPluginInstance implements PluginCallbacks {\n    toJsonTrimmed(s: StateValueAtPath) {\n        const limit = 100;\n        const r = JSON.stringify(s);\n        if (r && r.length > 100) {\n            return `${r.slice(0, limit)}... (${r.length - limit} characters trunkated)`\n        }\n        return r;\n    }\n\n    onSet(p: PluginCallbacksOnSetArgument) {\n        // tslint:disable-next-line: no-console\n        console.log(\n            `[hookstate]: new value set at path '/${p.path.join('/')}': ` +\n            `${this.toJsonTrimmed(p.value)}`,\n            p);\n    }\n\n    log(path: Path, l: Pick<PluginStateControl<StateValueAtPath>, 'getUntracked'>) {\n        // tslint:disable-next-line: no-console\n        return console.log(\n            `[hookstate]: current value at path '/${path.join('/')}: ` +\n            `${this.toJsonTrimmed(l.getUntracked())}'`,\n            {\n                path: path,\n                value: l.getUntracked()\n            });\n    }\n}\n\nconst PluginID = Symbol('Logger');\n\n// tslint:disable-next-line: function-name\nexport function Logger(): Plugin;\nexport function Logger<S>($this: State<S>): LoggerExtensions;\nexport function Logger<S>($this?: State<S>): Plugin | LoggerExtensions {\n    if ($this) {\n        const th = $this as State<S>\n        let [instance, controls] = th[self].attach(PluginID);\n        if (instance instanceof Error) {\n            // auto attach instead of throwing\n            Logger(th)\n            instance = th[self].attach(PluginID)[0];\n        }\n        const inst = instance as LoggerPluginInstance;\n        return {\n            log: () => inst.log(th[self].path, controls)\n        }\n    }\n    return {\n        id: PluginID,\n        init: () => {\n            // tslint:disable-next-line: no-console\n            console.log(`[hookstate]: logger attached`);\n            return new LoggerPluginInstance();\n        }\n    }\n}\n"],"names":["self"],"mappings":";;;;;;AAgBA;IAAA;KA4BC;IA3BG,4CAAa,GAAb,UAAc,CAAmB;QAC7B,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,GAAG,EAAE;YACrB,OAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,cAAQ,CAAC,CAAC,MAAM,GAAG,KAAK,4BAAwB,CAAA;SAC9E;QACD,OAAO,CAAC,CAAC;KACZ;IAED,oCAAK,GAAL,UAAM,CAA+B;;QAEjC,OAAO,CAAC,GAAG,CACP,0CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAK;aAC7D,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAG,CAAA,EAChC,CAAC,CAAC,CAAC;KACV;IAED,kCAAG,GAAH,UAAI,IAAU,EAAE,CAA6D;;QAEzE,OAAO,OAAO,CAAC,GAAG,CACd,0CAAwC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI;aACvD,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,MAAG,CAAA,EAC1C;YACI,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,CAAC,CAAC,YAAY,EAAE;SAC1B,CAAC,CAAC;KACV;IACL,2BAAC;AAAD,CAAC,IAAA;AAED,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;SAKlB,MAAM,CAAI,KAAgB;IACtC,IAAI,KAAK,EAAE;QACP,IAAM,IAAE,GAAG,KAAiB,CAAA;QACxB,IAAA,KAAuB,IAAE,CAACA,SAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAA/C,QAAQ,QAAA,EAAE,UAAQ,QAA6B,CAAC;QACrD,IAAI,QAAQ,YAAY,KAAK,EAAE;;YAE3B,MAAM,CAAC,IAAE,CAAC,CAAA;YACV,QAAQ,GAAG,IAAE,CAACA,SAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3C;QACD,IAAM,MAAI,GAAG,QAAgC,CAAC;QAC9C,OAAO;YACH,GAAG,EAAE,cAAM,OAAA,MAAI,CAAC,GAAG,CAAC,IAAE,CAACA,SAAI,CAAC,CAAC,IAAI,EAAE,UAAQ,CAAC,GAAA;SAC/C,CAAA;KACJ;IACD,OAAO;QACH,EAAE,EAAE,QAAQ;QACZ,IAAI,EAAE;;YAEF,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAC5C,OAAO,IAAI,oBAAoB,EAAE,CAAC;SACrC;KACJ,CAAA;AACL;;;;"}