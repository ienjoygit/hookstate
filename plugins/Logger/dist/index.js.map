{"version":3,"file":"index.js","sources":["../src/Logger.ts"],"sourcesContent":["\r\nimport {\r\n    Plugin,\r\n    Path,\r\n    StateValueAtPath,\r\n    PluginCallbacks,\r\n    PluginCallbacksOnSetArgument,\r\n    State,\r\n    PluginStateControl\r\n} from '@hookstate/core';\r\n\r\nexport interface LoggerExtensions {\r\n    log(): void;\r\n}\r\n\r\nclass LoggerPluginInstance implements PluginCallbacks {\r\n    toJsonTrimmed(s: StateValueAtPath) {\r\n        const limit = 100;\r\n        const r = JSON.stringify(s);\r\n        if (r && r.length > 100) {\r\n            return `${r.slice(0, limit)}... (${r.length - limit} characters trunkated)`\r\n        }\r\n        return r;\r\n    }\r\n\r\n    onSet(p: PluginCallbacksOnSetArgument) {\r\n        // tslint:disable-next-line: no-console\r\n        console.log(\r\n            `[hookstate]: new value set at path '/${p.path.join('/')}': ` +\r\n            `${this.toJsonTrimmed(p.value)}`,\r\n            p);\r\n    }\r\n\r\n    log(path: Path, l: Pick<PluginStateControl<StateValueAtPath>, 'getUntracked'>) {\r\n        // tslint:disable-next-line: no-console\r\n        return console.log(\r\n            `[hookstate]: current value at path '/${path.join('/')}: ` +\r\n            `${this.toJsonTrimmed(l.getUntracked())}'`,\r\n            {\r\n                path: path,\r\n                value: l.getUntracked()\r\n            });\r\n    }\r\n}\r\n\r\nconst PluginID = Symbol('Logger');\r\n\r\n// tslint:disable-next-line: function-name\r\nexport function Logger(): Plugin;\r\nexport function Logger<S>($this: State<S>): LoggerExtensions;\r\nexport function Logger<S>($this?: State<S>): Plugin | LoggerExtensions {\r\n    if ($this) {\r\n        const th = $this as State<S>\r\n        let [instance, controls] = th.attach(PluginID);\r\n        if (instance instanceof Error) {\r\n            // auto attach instead of throwing\r\n            Logger(th)\r\n            instance = th.attach(PluginID)[0];\r\n        }\r\n        const inst = instance as LoggerPluginInstance;\r\n        return {\r\n            log: () => inst.log(th.path, controls)\r\n        }\r\n    }\r\n    return {\r\n        id: PluginID,\r\n        init: () => {\r\n            // tslint:disable-next-line: no-console\r\n            console.log(`[hookstate]: logger attached`);\r\n            return new LoggerPluginInstance();\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAeA;IAAA;KA4BC;IA3BG,4CAAa,GAAb,UAAc,CAAmB;QAC7B,IAAM,KAAK,GAAG,GAAG,CAAC;QAClB,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,GAAG,EAAE;YACrB,OAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,cAAQ,CAAC,CAAC,MAAM,GAAG,KAAK,4BAAwB,CAAA;SAC9E;QACD,OAAO,CAAC,CAAC;KACZ;IAED,oCAAK,GAAL,UAAM,CAA+B;;QAEjC,OAAO,CAAC,GAAG,CACP,0CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAK;aAC7D,KAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAG,CAAA,EAChC,CAAC,CAAC,CAAC;KACV;IAED,kCAAG,GAAH,UAAI,IAAU,EAAE,CAA6D;;QAEzE,OAAO,OAAO,CAAC,GAAG,CACd,0CAAwC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI;aACvD,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,MAAG,CAAA,EAC1C;YACI,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,CAAC,CAAC,YAAY,EAAE;SAC1B,CAAC,CAAC;KACV;IACL,2BAAC;AAAD,CAAC,IAAA;AAED,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;SAKlB,MAAM,CAAI,KAAgB;IACtC,IAAI,KAAK,EAAE;QACP,IAAM,IAAE,GAAG,KAAiB,CAAA;QACxB,IAAA,KAAuB,IAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAzC,QAAQ,QAAA,EAAE,UAAQ,QAAuB,CAAC;QAC/C,IAAI,QAAQ,YAAY,KAAK,EAAE;;YAE3B,MAAM,CAAC,IAAE,CAAC,CAAA;YACV,QAAQ,GAAG,IAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QACD,IAAM,MAAI,GAAG,QAAgC,CAAC;QAC9C,OAAO;YACH,GAAG,EAAE,cAAM,OAAA,MAAI,CAAC,GAAG,CAAC,IAAE,CAAC,IAAI,EAAE,UAAQ,CAAC,GAAA;SACzC,CAAA;KACJ;IACD,OAAO;QACH,EAAE,EAAE,QAAQ;QACZ,IAAI,EAAE;;YAEF,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAC5C,OAAO,IAAI,oBAAoB,EAAE,CAAC;SACrC;KACJ,CAAA;AACL;;;;"}